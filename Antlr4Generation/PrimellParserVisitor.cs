//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/darrell/Projects/Primell/Antlr4Generation/PrimellParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="PrimellParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IPrimellParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLine([NotNull] PrimellParser.LineContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.outputSpec"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOutputSpec([NotNull] PrimellParser.OutputSpecContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.termSeq"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTermSeq([NotNull] PrimellParser.TermSeqContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.concatRtlTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConcatRtlTerm([NotNull] PrimellParser.ConcatRtlTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>passThroughRtl</c>
	/// labeled alternative in <see cref="PrimellParser.rtlTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPassThroughRtl([NotNull] PrimellParser.PassThroughRtlContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stdAssign</c>
	/// labeled alternative in <see cref="PrimellParser.rtlTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStdAssign([NotNull] PrimellParser.StdAssignContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>forEachRightAssign</c>
	/// labeled alternative in <see cref="PrimellParser.rtlTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachRightAssign([NotNull] PrimellParser.ForEachRightAssignContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>forEachLeftAssign</c>
	/// labeled alternative in <see cref="PrimellParser.rtlTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachLeftAssign([NotNull] PrimellParser.ForEachLeftAssignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.binaryAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryAssign([NotNull] PrimellParser.BinaryAssignContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>binaryOperation</c>
	/// labeled alternative in <see cref="PrimellParser.mulTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryOperation([NotNull] PrimellParser.BinaryOperationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>forEachLeftBinary</c>
	/// labeled alternative in <see cref="PrimellParser.mulTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachLeftBinary([NotNull] PrimellParser.ForEachLeftBinaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>forEachChain</c>
	/// labeled alternative in <see cref="PrimellParser.mulTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachChain([NotNull] PrimellParser.ForEachChainContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>unaryOperation</c>
	/// labeled alternative in <see cref="PrimellParser.mulTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryOperation([NotNull] PrimellParser.UnaryOperationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>passThroughMulTerm</c>
	/// labeled alternative in <see cref="PrimellParser.mulTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPassThroughMulTerm([NotNull] PrimellParser.PassThroughMulTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>forEachUnary</c>
	/// labeled alternative in <see cref="PrimellParser.mulTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForEachUnary([NotNull] PrimellParser.ForEachUnaryContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.binaryOpWithRS"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryOpWithRS([NotNull] PrimellParser.BinaryOpWithRSContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.unaryOrBinaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryOrBinaryOp([NotNull] PrimellParser.UnaryOrBinaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>integer</c>
	/// labeled alternative in <see cref="PrimellParser.atomTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInteger([NotNull] PrimellParser.IntegerContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>infinity</c>
	/// labeled alternative in <see cref="PrimellParser.atomTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInfinity([NotNull] PrimellParser.InfinityContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>nullaryOperation</c>
	/// labeled alternative in <see cref="PrimellParser.atomTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullaryOperation([NotNull] PrimellParser.NullaryOperationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>emptyList</c>
	/// labeled alternative in <see cref="PrimellParser.atomTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptyList([NotNull] PrimellParser.EmptyListContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="PrimellParser.atomTerm"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParens([NotNull] PrimellParser.ParensContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.baseNullaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBaseNullaryOp([NotNull] PrimellParser.BaseNullaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.baseUnaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBaseUnaryOp([NotNull] PrimellParser.BaseUnaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.baseBinaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBaseBinaryOp([NotNull] PrimellParser.BaseBinaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.conditionalOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditionalOp([NotNull] PrimellParser.ConditionalOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.condMods"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondMods([NotNull] PrimellParser.CondModsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.condFuncMod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondFuncMod([NotNull] PrimellParser.CondFuncModContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.opMods"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOpMods([NotNull] PrimellParser.OpModsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.assignMods"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignMods([NotNull] PrimellParser.AssignModsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.nullaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullaryOp([NotNull] PrimellParser.NullaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.unaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryOp([NotNull] PrimellParser.UnaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.unaryAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryAssign([NotNull] PrimellParser.UnaryAssignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.binaryOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryOp([NotNull] PrimellParser.BinaryOpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.op_list_diff"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOp_list_diff([NotNull] PrimellParser.Op_list_diffContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.cond_mod_back_jump"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCond_mod_back_jump([NotNull] PrimellParser.Cond_mod_back_jumpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.op_div"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOp_div([NotNull] PrimellParser.Op_divContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.cond_mod_jump"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCond_mod_jump([NotNull] PrimellParser.Cond_mod_jumpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.op_max"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOp_max([NotNull] PrimellParser.Op_maxContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.cond_mod_tail"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCond_mod_tail([NotNull] PrimellParser.Cond_mod_tailContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.op_mul"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOp_mul([NotNull] PrimellParser.Op_mulContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.cond_mod_while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCond_mod_while([NotNull] PrimellParser.Cond_mod_whileContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.op_add"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOp_add([NotNull] PrimellParser.Op_addContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.cond_mod_do_while"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCond_mod_do_while([NotNull] PrimellParser.Cond_mod_do_whileContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.op_neg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOp_neg([NotNull] PrimellParser.Op_negContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="PrimellParser.cond_mod_neg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCond_mod_neg([NotNull] PrimellParser.Cond_mod_negContext context);
}
