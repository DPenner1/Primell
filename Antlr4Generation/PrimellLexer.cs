//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/darrell/Projects/Prime/Antlr4Generation/PrimellLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PrimellLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, INFINITY=2, IDENTIFIER=3, RTL=4, ASSIGN=5, FOREACH_LEFT=6, FOREACH_RIGHT=7, 
		LPAREN=8, RPAREN=9, OUT_INV=10, OUT_DEF=11, OUT_STR=12, OPMOD_POW=13, 
		OPMOD_CUT=14, OPMOD_FOLD=15, COMMENT_START=16, OP_READ_CODE=17, OP_READ_STR=18, 
		OP_READ_CSV=19, OP_GAMMA=20, OP_NEXT=21, OP_PREV=22, OP_ROUND=23, OP_NEGATE=24, 
		OP_HEAD=25, OP_TAIL=26, OP_DISTINCT=27, OP_FLATTEN=28, OP_PURGE=29, OP_REV=30, 
		OP_SORT=31, OP_ADD=32, OP_SUB=33, OP_DIV=34, OP_MUL=35, OP_MOD=36, OP_POW=37, 
		OP_LOG=38, OP_INC_RANGE=39, OP_RANGE=40, OP_SMALL=41, OP_BIG=42, OP_BIN_AND=43, 
		OP_BIN_OR=44, OP_BIN_XOR=45, OP_BIN_NOT=46, OP_LSHIFT=47, OP_RSHIFT=48, 
		OP_LROTATE=49, OP_RROTATE=50, OP_INDEX=51, OP_INDEX_OF=52, OP_FILT=53, 
		OP_NEG_FILT=54, OP_JUMP=55, OP_NEG_JUMP=56, OP_JUMP_BACK=57, OP_NEG_JUMP_BACK=58, 
		OP_COND=59, OP_NEG_COND=60, OP_LIST_DIFF=61, OP_INTERSECT=62, WS=63, NL=64, 
		COMMENT=65;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "INFINITY", "IDENTIFIER", "RTL", "ASSIGN", "FOREACH_LEFT", "FOREACH_RIGHT", 
		"LPAREN", "RPAREN", "OUT_INV", "OUT_DEF", "OUT_STR", "OPMOD_POW", "OPMOD_CUT", 
		"OPMOD_FOLD", "COMMENT_START", "OP_READ_CODE", "OP_READ_STR", "OP_READ_CSV", 
		"OP_GAMMA", "OP_NEXT", "OP_PREV", "OP_ROUND", "OP_NEGATE", "OP_HEAD", 
		"OP_TAIL", "OP_DISTINCT", "OP_FLATTEN", "OP_PURGE", "OP_REV", "OP_SORT", 
		"OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", "OP_MOD", "OP_POW", "OP_LOG", 
		"OP_INC_RANGE", "OP_RANGE", "OP_SMALL", "OP_BIG", "OP_BIN_AND", "OP_BIN_OR", 
		"OP_BIN_XOR", "OP_BIN_NOT", "OP_LSHIFT", "OP_RSHIFT", "OP_LROTATE", "OP_RROTATE", 
		"OP_INDEX", "OP_INDEX_OF", "OP_FILT", "OP_NEG_FILT", "OP_JUMP", "OP_NEG_JUMP", 
		"OP_JUMP_BACK", "OP_NEG_JUMP_BACK", "OP_COND", "OP_NEG_COND", "OP_LIST_DIFF", 
		"OP_INTERSECT", "WS", "NL", "COMMENT"
	};


	public PrimellLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PrimellLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'\\u221E'", null, "'$'", "'='", "'['", "']'", "'('", "')'", 
		"'\"~'", "'\"\"'", "'\"'", "'^'", "'`'", "'!'", "'~~'", "':_'", "':\"'", 
		"':,'", "'\\u0393'", "'++'", "'--'", "'+-'", "'~'", "'_<'", "'_>'", "'_*'", 
		"'__'", "'_?'", "'_~'", "'_@'", "'+'", "'-'", "'/'", "'*'", "'%'", "'**'", 
		"'//'", "'\\u2026'", "'..'", "'<'", "'>'", "'`&'", "'`|'", "'`^'", "'`~'", 
		"'<<'", "'>>'", "'<<<'", "'>>>'", "'@'", "'@#'", "'*?'", "'*?~'", "'?/'", 
		"'?~/'", "'?\\'", "'?~\\'", "'?'", "'?~'", "'\\'", "'&'", null, "'\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "INFINITY", "IDENTIFIER", "RTL", "ASSIGN", "FOREACH_LEFT", 
		"FOREACH_RIGHT", "LPAREN", "RPAREN", "OUT_INV", "OUT_DEF", "OUT_STR", 
		"OPMOD_POW", "OPMOD_CUT", "OPMOD_FOLD", "COMMENT_START", "OP_READ_CODE", 
		"OP_READ_STR", "OP_READ_CSV", "OP_GAMMA", "OP_NEXT", "OP_PREV", "OP_ROUND", 
		"OP_NEGATE", "OP_HEAD", "OP_TAIL", "OP_DISTINCT", "OP_FLATTEN", "OP_PURGE", 
		"OP_REV", "OP_SORT", "OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", "OP_MOD", 
		"OP_POW", "OP_LOG", "OP_INC_RANGE", "OP_RANGE", "OP_SMALL", "OP_BIG", 
		"OP_BIN_AND", "OP_BIN_OR", "OP_BIN_XOR", "OP_BIN_NOT", "OP_LSHIFT", "OP_RSHIFT", 
		"OP_LROTATE", "OP_RROTATE", "OP_INDEX", "OP_INDEX_OF", "OP_FILT", "OP_NEG_FILT", 
		"OP_JUMP", "OP_NEG_JUMP", "OP_JUMP_BACK", "OP_NEG_JUMP_BACK", "OP_COND", 
		"OP_NEG_COND", "OP_LIST_DIFF", "OP_INTERSECT", "WS", "NL", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PrimellLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrimellLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,65,319,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,1,0,4,0,133,8,0,11,0,12,0,134,1,1,1,1,1,2,4,2,140,8,2,11,
		2,12,2,141,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,
		1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,
		1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,
		1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,
		1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,
		1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,
		1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,
		1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,
		1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,51,1,51,
		1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,
		1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,60,
		1,60,1,61,1,61,1,62,4,62,303,8,62,11,62,12,62,304,1,62,1,62,1,63,1,63,
		1,64,1,64,1,64,1,64,5,64,315,8,64,10,64,12,64,318,9,64,0,0,65,1,1,3,2,
		5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
		16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
		28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
		40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
		103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,
		123,62,125,63,127,64,129,65,1,0,4,5,0,48,57,65,90,97,122,222,222,254,254,
		1,0,44,44,3,0,9,9,13,13,32,32,2,0,10,10,13,13,322,0,1,1,0,0,0,0,3,1,0,
		0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
		103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
		113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
		123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,1,132,1,0,0,0,3,
		136,1,0,0,0,5,139,1,0,0,0,7,143,1,0,0,0,9,145,1,0,0,0,11,147,1,0,0,0,13,
		149,1,0,0,0,15,151,1,0,0,0,17,153,1,0,0,0,19,155,1,0,0,0,21,158,1,0,0,
		0,23,161,1,0,0,0,25,163,1,0,0,0,27,165,1,0,0,0,29,167,1,0,0,0,31,169,1,
		0,0,0,33,172,1,0,0,0,35,175,1,0,0,0,37,178,1,0,0,0,39,181,1,0,0,0,41,183,
		1,0,0,0,43,186,1,0,0,0,45,189,1,0,0,0,47,192,1,0,0,0,49,194,1,0,0,0,51,
		197,1,0,0,0,53,200,1,0,0,0,55,203,1,0,0,0,57,206,1,0,0,0,59,209,1,0,0,
		0,61,212,1,0,0,0,63,215,1,0,0,0,65,217,1,0,0,0,67,219,1,0,0,0,69,221,1,
		0,0,0,71,223,1,0,0,0,73,225,1,0,0,0,75,228,1,0,0,0,77,231,1,0,0,0,79,233,
		1,0,0,0,81,236,1,0,0,0,83,238,1,0,0,0,85,240,1,0,0,0,87,243,1,0,0,0,89,
		246,1,0,0,0,91,249,1,0,0,0,93,252,1,0,0,0,95,255,1,0,0,0,97,258,1,0,0,
		0,99,262,1,0,0,0,101,266,1,0,0,0,103,268,1,0,0,0,105,271,1,0,0,0,107,274,
		1,0,0,0,109,278,1,0,0,0,111,281,1,0,0,0,113,285,1,0,0,0,115,288,1,0,0,
		0,117,292,1,0,0,0,119,294,1,0,0,0,121,297,1,0,0,0,123,299,1,0,0,0,125,
		302,1,0,0,0,127,308,1,0,0,0,129,310,1,0,0,0,131,133,7,0,0,0,132,131,1,
		0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,2,1,0,0,0,136,
		137,5,8734,0,0,137,4,1,0,0,0,138,140,7,1,0,0,139,138,1,0,0,0,140,141,1,
		0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,6,1,0,0,0,143,144,5,36,0,0,144,
		8,1,0,0,0,145,146,5,61,0,0,146,10,1,0,0,0,147,148,5,91,0,0,148,12,1,0,
		0,0,149,150,5,93,0,0,150,14,1,0,0,0,151,152,5,40,0,0,152,16,1,0,0,0,153,
		154,5,41,0,0,154,18,1,0,0,0,155,156,5,34,0,0,156,157,5,126,0,0,157,20,
		1,0,0,0,158,159,5,34,0,0,159,160,5,34,0,0,160,22,1,0,0,0,161,162,5,34,
		0,0,162,24,1,0,0,0,163,164,5,94,0,0,164,26,1,0,0,0,165,166,5,96,0,0,166,
		28,1,0,0,0,167,168,5,33,0,0,168,30,1,0,0,0,169,170,5,126,0,0,170,171,5,
		126,0,0,171,32,1,0,0,0,172,173,5,58,0,0,173,174,5,95,0,0,174,34,1,0,0,
		0,175,176,5,58,0,0,176,177,5,34,0,0,177,36,1,0,0,0,178,179,5,58,0,0,179,
		180,5,44,0,0,180,38,1,0,0,0,181,182,5,915,0,0,182,40,1,0,0,0,183,184,5,
		43,0,0,184,185,5,43,0,0,185,42,1,0,0,0,186,187,5,45,0,0,187,188,5,45,0,
		0,188,44,1,0,0,0,189,190,5,43,0,0,190,191,5,45,0,0,191,46,1,0,0,0,192,
		193,5,126,0,0,193,48,1,0,0,0,194,195,5,95,0,0,195,196,5,60,0,0,196,50,
		1,0,0,0,197,198,5,95,0,0,198,199,5,62,0,0,199,52,1,0,0,0,200,201,5,95,
		0,0,201,202,5,42,0,0,202,54,1,0,0,0,203,204,5,95,0,0,204,205,5,95,0,0,
		205,56,1,0,0,0,206,207,5,95,0,0,207,208,5,63,0,0,208,58,1,0,0,0,209,210,
		5,95,0,0,210,211,5,126,0,0,211,60,1,0,0,0,212,213,5,95,0,0,213,214,5,64,
		0,0,214,62,1,0,0,0,215,216,5,43,0,0,216,64,1,0,0,0,217,218,5,45,0,0,218,
		66,1,0,0,0,219,220,5,47,0,0,220,68,1,0,0,0,221,222,5,42,0,0,222,70,1,0,
		0,0,223,224,5,37,0,0,224,72,1,0,0,0,225,226,5,42,0,0,226,227,5,42,0,0,
		227,74,1,0,0,0,228,229,5,47,0,0,229,230,5,47,0,0,230,76,1,0,0,0,231,232,
		5,8230,0,0,232,78,1,0,0,0,233,234,5,46,0,0,234,235,5,46,0,0,235,80,1,0,
		0,0,236,237,5,60,0,0,237,82,1,0,0,0,238,239,5,62,0,0,239,84,1,0,0,0,240,
		241,5,96,0,0,241,242,5,38,0,0,242,86,1,0,0,0,243,244,5,96,0,0,244,245,
		5,124,0,0,245,88,1,0,0,0,246,247,5,96,0,0,247,248,5,94,0,0,248,90,1,0,
		0,0,249,250,5,96,0,0,250,251,5,126,0,0,251,92,1,0,0,0,252,253,5,60,0,0,
		253,254,5,60,0,0,254,94,1,0,0,0,255,256,5,62,0,0,256,257,5,62,0,0,257,
		96,1,0,0,0,258,259,5,60,0,0,259,260,5,60,0,0,260,261,5,60,0,0,261,98,1,
		0,0,0,262,263,5,62,0,0,263,264,5,62,0,0,264,265,5,62,0,0,265,100,1,0,0,
		0,266,267,5,64,0,0,267,102,1,0,0,0,268,269,5,64,0,0,269,270,5,35,0,0,270,
		104,1,0,0,0,271,272,5,42,0,0,272,273,5,63,0,0,273,106,1,0,0,0,274,275,
		5,42,0,0,275,276,5,63,0,0,276,277,5,126,0,0,277,108,1,0,0,0,278,279,5,
		63,0,0,279,280,5,47,0,0,280,110,1,0,0,0,281,282,5,63,0,0,282,283,5,126,
		0,0,283,284,5,47,0,0,284,112,1,0,0,0,285,286,5,63,0,0,286,287,5,92,0,0,
		287,114,1,0,0,0,288,289,5,63,0,0,289,290,5,126,0,0,290,291,5,92,0,0,291,
		116,1,0,0,0,292,293,5,63,0,0,293,118,1,0,0,0,294,295,5,63,0,0,295,296,
		5,126,0,0,296,120,1,0,0,0,297,298,5,92,0,0,298,122,1,0,0,0,299,300,5,38,
		0,0,300,124,1,0,0,0,301,303,7,2,0,0,302,301,1,0,0,0,303,304,1,0,0,0,304,
		302,1,0,0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,307,6,62,0,0,307,126,1,
		0,0,0,308,309,5,10,0,0,309,128,1,0,0,0,310,311,5,126,0,0,311,312,5,126,
		0,0,312,316,1,0,0,0,313,315,8,3,0,0,314,313,1,0,0,0,315,318,1,0,0,0,316,
		314,1,0,0,0,316,317,1,0,0,0,317,130,1,0,0,0,318,316,1,0,0,0,5,0,134,141,
		304,316,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
