//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/darrell/Projects/Prime/Antlr4Generation/Primell.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PrimellLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, INT=7, RTL=8, ASSIGN=9, 
		USER_OP=10, OP_VAR1=11, OP_VAR2=12, OP_VAR3=13, OP_READ_LIST=14, OP_READ_STR=15, 
		OP_FACT=16, OP_NEXT=17, OP_PREV=18, OP_ROUND=19, OP_NEGATE=20, OP_HEAD=21, 
		OP_TAIL=22, OP_DISTINCT=23, OP_FLATTEN=24, OP_PURGE=25, OP_REV=26, OP_SORT=27, 
		OP_ADD=28, OP_SUB=29, OP_DIV=30, OP_MUL=31, OP_MOD=32, OP_POW=33, OP_LOG=34, 
		OP_INC_RANGE=35, OP_RANGE=36, OP_SMALL=37, OP_BIG=38, OP_BIN_AND=39, OP_BIN_OR=40, 
		OP_BIN_XOR=41, OP_BIN_NOT=42, OP_LSHIFT=43, OP_RSHIFT=44, OP_LROTATE=45, 
		OP_RROTATE=46, OP_INDEX=47, OP_INDEX_END=48, OP_INDEX_OF=49, OP_FILT=50, 
		OP_NEG_FILT=51, OP_JUMP=52, OP_NEG_JUMP=53, OP_JUMP_BACK=54, OP_NEG_JUMP_BACK=55, 
		OP_COND=56, OP_NEG_COND=57, OP_LIST_DIFF=58, OP_INTERSECT=59, OUT_INV=60, 
		OUT_DEF=61, OUT_STR=62, OPMOD_POW=63, OPMOD_CUT=64, OPMOD_FOLD=65, WS=66, 
		NL=67;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "INT", "RTL", "ASSIGN", 
		"USER_OP", "OP_VAR1", "OP_VAR2", "OP_VAR3", "OP_READ_LIST", "OP_READ_STR", 
		"OP_FACT", "OP_NEXT", "OP_PREV", "OP_ROUND", "OP_NEGATE", "OP_HEAD", "OP_TAIL", 
		"OP_DISTINCT", "OP_FLATTEN", "OP_PURGE", "OP_REV", "OP_SORT", "OP_ADD", 
		"OP_SUB", "OP_DIV", "OP_MUL", "OP_MOD", "OP_POW", "OP_LOG", "OP_INC_RANGE", 
		"OP_RANGE", "OP_SMALL", "OP_BIG", "OP_BIN_AND", "OP_BIN_OR", "OP_BIN_XOR", 
		"OP_BIN_NOT", "OP_LSHIFT", "OP_RSHIFT", "OP_LROTATE", "OP_RROTATE", "OP_INDEX", 
		"OP_INDEX_END", "OP_INDEX_OF", "OP_FILT", "OP_NEG_FILT", "OP_JUMP", "OP_NEG_JUMP", 
		"OP_JUMP_BACK", "OP_NEG_JUMP_BACK", "OP_COND", "OP_NEG_COND", "OP_LIST_DIFF", 
		"OP_INTERSECT", "OUT_INV", "OUT_DEF", "OUT_STR", "OPMOD_POW", "OPMOD_CUT", 
		"OPMOD_FOLD", "WS", "NL"
	};


	public PrimellLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PrimellLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'-\\u221E'", "'\\u221E'", "'('", "')'", null, "'$'", 
		"'='", "'\\u03BB'", "','", "';'", "'#'", "':_'", "':~'", "'\\u0393'", 
		"'++'", "'--'", "'+-'", "'~'", "'_<'", "'_>'", "'_*'", "'__'", "'_?'", 
		"'_~'", "'_@'", "'+'", "'-'", "'/'", "'*'", "'%'", "'**'", "'//'", "'\\u2026'", 
		"'..'", "'<'", "'>'", "'`&'", "'`|'", "'`^'", "'`~'", "'<<'", "'>>'", 
		"'<<<'", "'>>>'", "'@'", "'@>'", "'@#'", "'*?'", "'*?~'", "'?/'", "'?~/'", 
		"'?\\'", "'?~\\'", "'?'", "'?~'", "'\\'", "'&'", "'\"~'", "'\"\"'", "'\"'", 
		"'^'", "'`'", "'!'", null, "'\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "INT", "RTL", "ASSIGN", "USER_OP", 
		"OP_VAR1", "OP_VAR2", "OP_VAR3", "OP_READ_LIST", "OP_READ_STR", "OP_FACT", 
		"OP_NEXT", "OP_PREV", "OP_ROUND", "OP_NEGATE", "OP_HEAD", "OP_TAIL", "OP_DISTINCT", 
		"OP_FLATTEN", "OP_PURGE", "OP_REV", "OP_SORT", "OP_ADD", "OP_SUB", "OP_DIV", 
		"OP_MUL", "OP_MOD", "OP_POW", "OP_LOG", "OP_INC_RANGE", "OP_RANGE", "OP_SMALL", 
		"OP_BIG", "OP_BIN_AND", "OP_BIN_OR", "OP_BIN_XOR", "OP_BIN_NOT", "OP_LSHIFT", 
		"OP_RSHIFT", "OP_LROTATE", "OP_RROTATE", "OP_INDEX", "OP_INDEX_END", "OP_INDEX_OF", 
		"OP_FILT", "OP_NEG_FILT", "OP_JUMP", "OP_NEG_JUMP", "OP_JUMP_BACK", "OP_NEG_JUMP_BACK", 
		"OP_COND", "OP_NEG_COND", "OP_LIST_DIFF", "OP_INTERSECT", "OUT_INV", "OUT_DEF", 
		"OUT_STR", "OPMOD_POW", "OPMOD_CUT", "OPMOD_FOLD", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Primell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrimellLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,67,317,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,
		1,4,1,4,1,5,1,5,1,6,4,6,150,8,6,11,6,12,6,151,1,7,1,7,1,8,1,8,1,9,1,9,
		1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,
		1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,
		1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
		1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
		1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,
		1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,
		1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,
		1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,
		1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,54,
		1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,59,1,60,1,60,
		1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,4,65,310,8,65,11,65,
		12,65,311,1,65,1,65,1,66,1,66,0,0,67,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
		8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
		20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
		32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
		44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
		55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,
		65,131,66,133,67,1,0,2,5,0,48,57,65,90,97,122,222,222,254,254,3,0,9,9,
		13,13,32,32,318,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
		1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
		0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
		0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,
		0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,1,135,1,0,0,0,3,137,1,
		0,0,0,5,139,1,0,0,0,7,142,1,0,0,0,9,144,1,0,0,0,11,146,1,0,0,0,13,149,
		1,0,0,0,15,153,1,0,0,0,17,155,1,0,0,0,19,157,1,0,0,0,21,159,1,0,0,0,23,
		161,1,0,0,0,25,163,1,0,0,0,27,165,1,0,0,0,29,168,1,0,0,0,31,171,1,0,0,
		0,33,173,1,0,0,0,35,176,1,0,0,0,37,179,1,0,0,0,39,182,1,0,0,0,41,184,1,
		0,0,0,43,187,1,0,0,0,45,190,1,0,0,0,47,193,1,0,0,0,49,196,1,0,0,0,51,199,
		1,0,0,0,53,202,1,0,0,0,55,205,1,0,0,0,57,207,1,0,0,0,59,209,1,0,0,0,61,
		211,1,0,0,0,63,213,1,0,0,0,65,215,1,0,0,0,67,218,1,0,0,0,69,221,1,0,0,
		0,71,223,1,0,0,0,73,226,1,0,0,0,75,228,1,0,0,0,77,230,1,0,0,0,79,233,1,
		0,0,0,81,236,1,0,0,0,83,239,1,0,0,0,85,242,1,0,0,0,87,245,1,0,0,0,89,248,
		1,0,0,0,91,252,1,0,0,0,93,256,1,0,0,0,95,258,1,0,0,0,97,261,1,0,0,0,99,
		264,1,0,0,0,101,267,1,0,0,0,103,271,1,0,0,0,105,274,1,0,0,0,107,278,1,
		0,0,0,109,281,1,0,0,0,111,285,1,0,0,0,113,287,1,0,0,0,115,290,1,0,0,0,
		117,292,1,0,0,0,119,294,1,0,0,0,121,297,1,0,0,0,123,300,1,0,0,0,125,302,
		1,0,0,0,127,304,1,0,0,0,129,306,1,0,0,0,131,309,1,0,0,0,133,315,1,0,0,
		0,135,136,5,91,0,0,136,2,1,0,0,0,137,138,5,93,0,0,138,4,1,0,0,0,139,140,
		5,45,0,0,140,141,5,8734,0,0,141,6,1,0,0,0,142,143,5,8734,0,0,143,8,1,0,
		0,0,144,145,5,40,0,0,145,10,1,0,0,0,146,147,5,41,0,0,147,12,1,0,0,0,148,
		150,7,0,0,0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,
		0,0,0,152,14,1,0,0,0,153,154,5,36,0,0,154,16,1,0,0,0,155,156,5,61,0,0,
		156,18,1,0,0,0,157,158,5,955,0,0,158,20,1,0,0,0,159,160,5,44,0,0,160,22,
		1,0,0,0,161,162,5,59,0,0,162,24,1,0,0,0,163,164,5,35,0,0,164,26,1,0,0,
		0,165,166,5,58,0,0,166,167,5,95,0,0,167,28,1,0,0,0,168,169,5,58,0,0,169,
		170,5,126,0,0,170,30,1,0,0,0,171,172,5,915,0,0,172,32,1,0,0,0,173,174,
		5,43,0,0,174,175,5,43,0,0,175,34,1,0,0,0,176,177,5,45,0,0,177,178,5,45,
		0,0,178,36,1,0,0,0,179,180,5,43,0,0,180,181,5,45,0,0,181,38,1,0,0,0,182,
		183,5,126,0,0,183,40,1,0,0,0,184,185,5,95,0,0,185,186,5,60,0,0,186,42,
		1,0,0,0,187,188,5,95,0,0,188,189,5,62,0,0,189,44,1,0,0,0,190,191,5,95,
		0,0,191,192,5,42,0,0,192,46,1,0,0,0,193,194,5,95,0,0,194,195,5,95,0,0,
		195,48,1,0,0,0,196,197,5,95,0,0,197,198,5,63,0,0,198,50,1,0,0,0,199,200,
		5,95,0,0,200,201,5,126,0,0,201,52,1,0,0,0,202,203,5,95,0,0,203,204,5,64,
		0,0,204,54,1,0,0,0,205,206,5,43,0,0,206,56,1,0,0,0,207,208,5,45,0,0,208,
		58,1,0,0,0,209,210,5,47,0,0,210,60,1,0,0,0,211,212,5,42,0,0,212,62,1,0,
		0,0,213,214,5,37,0,0,214,64,1,0,0,0,215,216,5,42,0,0,216,217,5,42,0,0,
		217,66,1,0,0,0,218,219,5,47,0,0,219,220,5,47,0,0,220,68,1,0,0,0,221,222,
		5,8230,0,0,222,70,1,0,0,0,223,224,5,46,0,0,224,225,5,46,0,0,225,72,1,0,
		0,0,226,227,5,60,0,0,227,74,1,0,0,0,228,229,5,62,0,0,229,76,1,0,0,0,230,
		231,5,96,0,0,231,232,5,38,0,0,232,78,1,0,0,0,233,234,5,96,0,0,234,235,
		5,124,0,0,235,80,1,0,0,0,236,237,5,96,0,0,237,238,5,94,0,0,238,82,1,0,
		0,0,239,240,5,96,0,0,240,241,5,126,0,0,241,84,1,0,0,0,242,243,5,60,0,0,
		243,244,5,60,0,0,244,86,1,0,0,0,245,246,5,62,0,0,246,247,5,62,0,0,247,
		88,1,0,0,0,248,249,5,60,0,0,249,250,5,60,0,0,250,251,5,60,0,0,251,90,1,
		0,0,0,252,253,5,62,0,0,253,254,5,62,0,0,254,255,5,62,0,0,255,92,1,0,0,
		0,256,257,5,64,0,0,257,94,1,0,0,0,258,259,5,64,0,0,259,260,5,62,0,0,260,
		96,1,0,0,0,261,262,5,64,0,0,262,263,5,35,0,0,263,98,1,0,0,0,264,265,5,
		42,0,0,265,266,5,63,0,0,266,100,1,0,0,0,267,268,5,42,0,0,268,269,5,63,
		0,0,269,270,5,126,0,0,270,102,1,0,0,0,271,272,5,63,0,0,272,273,5,47,0,
		0,273,104,1,0,0,0,274,275,5,63,0,0,275,276,5,126,0,0,276,277,5,47,0,0,
		277,106,1,0,0,0,278,279,5,63,0,0,279,280,5,92,0,0,280,108,1,0,0,0,281,
		282,5,63,0,0,282,283,5,126,0,0,283,284,5,92,0,0,284,110,1,0,0,0,285,286,
		5,63,0,0,286,112,1,0,0,0,287,288,5,63,0,0,288,289,5,126,0,0,289,114,1,
		0,0,0,290,291,5,92,0,0,291,116,1,0,0,0,292,293,5,38,0,0,293,118,1,0,0,
		0,294,295,5,34,0,0,295,296,5,126,0,0,296,120,1,0,0,0,297,298,5,34,0,0,
		298,299,5,34,0,0,299,122,1,0,0,0,300,301,5,34,0,0,301,124,1,0,0,0,302,
		303,5,94,0,0,303,126,1,0,0,0,304,305,5,96,0,0,305,128,1,0,0,0,306,307,
		5,33,0,0,307,130,1,0,0,0,308,310,7,1,0,0,309,308,1,0,0,0,310,311,1,0,0,
		0,311,309,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,6,65,0,0,314,
		132,1,0,0,0,315,316,5,10,0,0,316,134,1,0,0,0,3,0,151,311,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
