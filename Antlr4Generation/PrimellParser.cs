//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/darrell/Projects/Primell/Antlr4Generation/PrimellParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PrimellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INFINITY=1, RTL=2, LTR=3, CONCAT=4, ASSIGN=5, L_BRACK=6, R_BRACK=7, L_PAREN=8, 
		R_PAREN=9, VERT_BAR=10, DOT=11, TAIL=12, PLUS=13, STAR=14, NEGATE=15, 
		F_SLASH=16, B_SLASH=17, OUT_INV=18, OUT_DEF=19, OUT_STR=20, OPMOD_POW=21, 
		OPMOD_CUT=22, OP_NULLARY=23, OP_UNARY=24, OP_USER_UNARY=25, OP_BINARY=26, 
		OP_USER_BINARY=27, OP_COND=28, WS=29, INT_OR_ID=30, COMMENT=31;
	public const int
		RULE_line = 0, RULE_outputSpec = 1, RULE_termSeq = 2, RULE_concatRtlTerm = 3, 
		RULE_rtlTerm = 4, RULE_binaryAssign = 5, RULE_mulTerm = 6, RULE_binaryOpWithRS = 7, 
		RULE_unaryOrBinaryOp = 8, RULE_atomTerm = 9, RULE_intOrId = 10, RULE_baseNullaryOp = 11, 
		RULE_baseUnaryOp = 12, RULE_baseBinaryOp = 13, RULE_conditionalOp = 14, 
		RULE_condFunc = 15, RULE_opMods = 16, RULE_assignMods = 17, RULE_nullaryOp = 18, 
		RULE_unaryOp = 19, RULE_unaryAssign = 20, RULE_binaryOp = 21, RULE_op_list_diff = 22, 
		RULE_cond_mod_back_jump = 23, RULE_op_div = 24, RULE_cond_mod_jump = 25, 
		RULE_op_max = 26, RULE_cond_mod_tail = 27, RULE_op_mul = 28, RULE_cond_mod_while = 29, 
		RULE_op_add = 30, RULE_cond_mod_do_while = 31, RULE_op_neg = 32, RULE_cond_mod_neg = 33;
	public static readonly string[] ruleNames = {
		"line", "outputSpec", "termSeq", "concatRtlTerm", "rtlTerm", "binaryAssign", 
		"mulTerm", "binaryOpWithRS", "unaryOrBinaryOp", "atomTerm", "intOrId", 
		"baseNullaryOp", "baseUnaryOp", "baseBinaryOp", "conditionalOp", "condFunc", 
		"opMods", "assignMods", "nullaryOp", "unaryOp", "unaryAssign", "binaryOp", 
		"op_list_diff", "cond_mod_back_jump", "op_div", "cond_mod_jump", "op_max", 
		"cond_mod_tail", "op_mul", "cond_mod_while", "op_add", "cond_mod_do_while", 
		"op_neg", "cond_mod_neg"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\u221E'", "'$'", "'\\u20AC'", "';'", "'='", "'['", "']'", "'('", 
		"')'", "'|'", "'.'", "'>'", "'+'", "'*'", "'~'", "'/'", "'\\'", "'\"~'", 
		"'\"\"'", "'\"'", "'^'", "'`'", null, null, null, null, null, "'?'", null, 
		null, "'~~'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INFINITY", "RTL", "LTR", "CONCAT", "ASSIGN", "L_BRACK", "R_BRACK", 
		"L_PAREN", "R_PAREN", "VERT_BAR", "DOT", "TAIL", "PLUS", "STAR", "NEGATE", 
		"F_SLASH", "B_SLASH", "OUT_INV", "OUT_DEF", "OUT_STR", "OPMOD_POW", "OPMOD_CUT", 
		"OP_NULLARY", "OP_UNARY", "OP_USER_UNARY", "OP_BINARY", "OP_USER_BINARY", 
		"OP_COND", "WS", "INT_OR_ID", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PrimellParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrimellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PrimellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PrimellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PrimellParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputSpecContext outputSpec() {
			return GetRuleContext<OutputSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PrimellParser.COMMENT, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 0, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			termSeq();
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1835008L) != 0)) {
				{
				State = 69;
				outputSpec();
				}
			}

			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 72;
				Match(COMMENT);
				}
			}

			State = 75;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_INV() { return GetToken(PrimellParser.OUT_INV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_DEF() { return GetToken(PrimellParser.OUT_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_STR() { return GetToken(PrimellParser.OUT_STR, 0); }
		public OutputSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputSpecContext outputSpec() {
		OutputSpecContext _localctx = new OutputSpecContext(Context, State);
		EnterRule(_localctx, 2, RULE_outputSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1835008L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatRtlTermContext[] concatRtlTerm() {
			return GetRuleContexts<ConcatRtlTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatRtlTermContext concatRtlTerm(int i) {
			return GetRuleContext<ConcatRtlTermContext>(i);
		}
		public TermSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermSeqContext termSeq() {
		TermSeqContext _localctx = new TermSeqContext(Context, State);
		EnterRule(_localctx, 4, RULE_termSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 79;
					concatRtlTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatRtlTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtlTermContext rtlTerm() {
			return GetRuleContext<RtlTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(PrimellParser.CONCAT, 0); }
		public ConcatRtlTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatRtlTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatRtlTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatRtlTermContext concatRtlTerm() {
		ConcatRtlTermContext _localctx = new ConcatRtlTermContext(Context, State);
		EnterRule(_localctx, 6, RULE_concatRtlTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONCAT) {
				{
				State = 84;
				Match(CONCAT);
				}
			}

			State = 87;
			rtlTerm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtlTermContext : ParserRuleContext {
		public RtlTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtlTerm; } }
	 
		public RtlTermContext() { }
		public virtual void CopyFrom(RtlTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StdAssignContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryAssignContext binaryAssign() {
			return GetRuleContext<BinaryAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtlTermContext rtlTerm() {
			return GetRuleContext<RtlTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		public StdAssignContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStdAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachLeftAssignContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext[] termSeq() {
			return GetRuleContexts<TermSeqContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq(int i) {
			return GetRuleContext<TermSeqContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryAssignContext binaryAssign() {
			return GetRuleContext<BinaryAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtlTermContext rtlTerm() {
			return GetRuleContext<RtlTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		public ForEachLeftAssignContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLeftAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachRightAssignContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryAssignContext binaryAssign() {
			return GetRuleContext<BinaryAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		public ForEachRightAssignContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachRightAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PassThroughRtlContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		public PassThroughRtlContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassThroughRtl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RtlTermContext rtlTerm() {
		RtlTermContext _localctx = new RtlTermContext(Context, State);
		EnterRule(_localctx, 8, RULE_rtlTerm);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new PassThroughRtlContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				mulTerm(0);
				}
				break;
			case 2:
				_localctx = new StdAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				mulTerm(0);
				State = 91;
				binaryAssign();
				State = 95;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INFINITY:
				case L_BRACK:
				case L_PAREN:
				case OP_NULLARY:
				case INT_OR_ID:
					{
					State = 92;
					rtlTerm();
					}
					break;
				case RTL:
					{
					State = 93;
					Match(RTL);
					State = 94;
					termSeq();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new ForEachRightAssignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				mulTerm(0);
				State = 98;
				binaryAssign();
				State = 99;
				Match(L_BRACK);
				State = 100;
				termSeq();
				State = 101;
				Match(R_BRACK);
				}
				break;
			case 4:
				_localctx = new ForEachLeftAssignContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				Match(L_BRACK);
				State = 104;
				termSeq();
				State = 105;
				Match(R_BRACK);
				State = 106;
				binaryAssign();
				State = 110;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INFINITY:
				case L_BRACK:
				case L_PAREN:
				case OP_NULLARY:
				case INT_OR_ID:
					{
					State = 107;
					rtlTerm();
					}
					break;
				case RTL:
					{
					State = 108;
					Match(RTL);
					State = 109;
					termSeq();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PrimellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignModsContext assignMods() {
			return GetRuleContext<AssignModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public BinaryAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryAssignContext binaryAssign() {
		BinaryAssignContext _localctx = new BinaryAssignContext(Context, State);
		EnterRule(_localctx, 10, RULE_binaryAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(ASSIGN);
			State = 115;
			assignMods();
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 469987328L) != 0)) {
				{
				State = 116;
				binaryOp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulTermContext : ParserRuleContext {
		public MulTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulTerm; } }
	 
		public MulTermContext() { }
		public virtual void CopyFrom(MulTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpWithRSContext binaryOpWithRS() {
			return GetRuleContext<BinaryOpWithRSContext>(0);
		}
		public BinaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachLeftBinaryContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpWithRSContext binaryOpWithRS() {
			return GetRuleContext<BinaryOpWithRSContext>(0);
		}
		public ForEachLeftBinaryContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLeftBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachChainContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERT_BAR() { return GetToken(PrimellParser.VERT_BAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOrBinaryOpContext[] unaryOrBinaryOp() {
			return GetRuleContexts<UnaryOrBinaryOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOrBinaryOpContext unaryOrBinaryOp(int i) {
			return GetRuleContext<UnaryOrBinaryOpContext>(i);
		}
		public ForEachChainContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachChain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public UnaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PassThroughMulTermContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		public PassThroughMulTermContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassThroughMulTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachUnaryContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public ForEachUnaryContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulTermContext mulTerm() {
		return mulTerm(0);
	}

	private MulTermContext mulTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MulTermContext _localctx = new MulTermContext(Context, _parentState);
		MulTermContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_mulTerm, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new PassThroughMulTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 120;
				atomTerm();
				}
				break;
			case 2:
				{
				_localctx = new ForEachUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121;
				Match(L_BRACK);
				State = 122;
				termSeq();
				State = 123;
				Match(R_BRACK);
				State = 124;
				unaryOp();
				}
				break;
			case 3:
				{
				_localctx = new ForEachLeftBinaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 126;
				Match(L_BRACK);
				State = 127;
				termSeq();
				State = 128;
				Match(R_BRACK);
				State = 129;
				binaryOpWithRS();
				}
				break;
			case 4:
				{
				_localctx = new ForEachChainContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131;
				Match(L_BRACK);
				State = 132;
				termSeq();
				State = 133;
				Match(VERT_BAR);
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 134;
					unaryOrBinaryOp();
					}
					}
					State = 137;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 520351840L) != 0) );
				State = 139;
				Match(R_BRACK);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 149;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 147;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new UnaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 143;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 144;
						unaryOp();
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 145;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 146;
						binaryOpWithRS();
						}
						break;
					}
					} 
				}
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryOpWithRSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		public BinaryOpWithRSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOpWithRS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOpWithRS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpWithRSContext binaryOpWithRS() {
		BinaryOpWithRSContext _localctx = new BinaryOpWithRSContext(Context, State);
		EnterRule(_localctx, 14, RULE_binaryOpWithRS);
		try {
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				binaryOp();
				State = 153;
				atomTerm();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				binaryOp();
				State = 156;
				Match(RTL);
				State = 157;
				termSeq();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 159;
				Match(L_BRACK);
				State = 160;
				binaryOp();
				State = 161;
				termSeq();
				State = 162;
				Match(R_BRACK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOrBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpWithRSContext binaryOpWithRS() {
			return GetRuleContext<BinaryOpWithRSContext>(0);
		}
		public UnaryOrBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOrBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOrBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOrBinaryOpContext unaryOrBinaryOp() {
		UnaryOrBinaryOpContext _localctx = new UnaryOrBinaryOpContext(Context, State);
		EnterRule(_localctx, 16, RULE_unaryOrBinaryOp);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
			case NEGATE:
			case OP_UNARY:
			case OP_USER_UNARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				unaryOp();
				}
				break;
			case L_BRACK:
			case TAIL:
			case PLUS:
			case STAR:
			case F_SLASH:
			case B_SLASH:
			case OP_BINARY:
			case OP_USER_BINARY:
			case OP_COND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				binaryOpWithRS();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomTermContext : ParserRuleContext {
		public AtomTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomTerm; } }
	 
		public AtomTermContext() { }
		public virtual void CopyFrom(AtomTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerOrIdentifierContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntOrIdContext intOrId() {
			return GetRuleContext<IntOrIdContext>(0);
		}
		public IntegerOrIdentifierContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerOrIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullaryOperationContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullaryOpContext nullaryOp() {
			return GetRuleContext<NullaryOpContext>(0);
		}
		public NullaryOperationContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyListContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(PrimellParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(PrimellParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		public EmptyListContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(PrimellParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(PrimellParser.R_PAREN, 0); }
		public ParensContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfinityContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFINITY() { return GetToken(PrimellParser.INFINITY, 0); }
		public InfinityContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfinity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomTermContext atomTerm() {
		AtomTermContext _localctx = new AtomTermContext(Context, State);
		EnterRule(_localctx, 18, RULE_atomTerm);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new IntegerOrIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				intOrId();
				}
				break;
			case 2:
				_localctx = new InfinityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				Match(INFINITY);
				}
				break;
			case 3:
				_localctx = new NullaryOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 172;
				nullaryOp();
				}
				break;
			case 4:
				_localctx = new EmptyListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				Match(L_PAREN);
				State = 174;
				Match(R_PAREN);
				}
				break;
			case 5:
				_localctx = new EmptyListContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 175;
				Match(L_BRACK);
				State = 176;
				Match(R_BRACK);
				}
				break;
			case 6:
				_localctx = new ParensContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 177;
				Match(L_PAREN);
				State = 178;
				termSeq();
				State = 179;
				Match(R_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntOrIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_OR_ID() { return GetTokens(PrimellParser.INT_OR_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_OR_ID(int i) {
			return GetToken(PrimellParser.INT_OR_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PrimellParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PrimellParser.DOT, i);
		}
		public IntOrIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intOrId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntOrId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntOrIdContext intOrId() {
		IntOrIdContext _localctx = new IntOrIdContext(Context, State);
		EnterRule(_localctx, 20, RULE_intOrId);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(INT_OR_ID);
			State = 188;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 184;
					Match(DOT);
					State = 185;
					Match(INT_OR_ID);
					}
					} 
				}
				State = 190;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NULLARY() { return GetToken(PrimellParser.OP_NULLARY, 0); }
		public BaseNullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNullaryOpContext baseNullaryOp() {
		BaseNullaryOpContext _localctx = new BaseNullaryOpContext(Context, State);
		EnterRule(_localctx, 22, RULE_baseNullaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(OP_NULLARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_UNARY() { return GetToken(PrimellParser.OP_UNARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_USER_UNARY() { return GetToken(PrimellParser.OP_USER_UNARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Op_negContext op_neg() {
			return GetRuleContext<Op_negContext>(0);
		}
		public BaseUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseUnaryOpContext baseUnaryOp() {
		BaseUnaryOpContext _localctx = new BaseUnaryOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_baseUnaryOp);
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_UNARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				Match(OP_UNARY);
				}
				break;
			case OP_USER_UNARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(OP_USER_UNARY);
				}
				break;
			case NEGATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 195;
				op_neg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BINARY() { return GetToken(PrimellParser.OP_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_USER_BINARY() { return GetToken(PrimellParser.OP_USER_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Op_addContext op_add() {
			return GetRuleContext<Op_addContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_mulContext op_mul() {
			return GetRuleContext<Op_mulContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_divContext op_div() {
			return GetRuleContext<Op_divContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_maxContext op_max() {
			return GetRuleContext<Op_maxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_list_diffContext op_list_diff() {
			return GetRuleContext<Op_list_diffContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BaseBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseBinaryOpContext baseBinaryOp() {
		BaseBinaryOpContext _localctx = new BaseBinaryOpContext(Context, State);
		EnterRule(_localctx, 26, RULE_baseBinaryOp);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				Match(OP_BINARY);
				}
				break;
			case OP_USER_BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				Match(OP_USER_BINARY);
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 200;
				op_add();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 201;
				op_mul();
				}
				break;
			case F_SLASH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 202;
				op_div();
				}
				break;
			case TAIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 203;
				op_max();
				}
				break;
			case B_SLASH:
				EnterOuterAlt(_localctx, 7);
				{
				State = 204;
				op_list_diff();
				}
				break;
			case OP_COND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 205;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COND() { return GetToken(PrimellParser.OP_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondFuncContext condFunc() {
			return GetRuleContext<CondFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_negContext cond_mod_neg() {
			return GetRuleContext<Cond_mod_negContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_tailContext cond_mod_tail() {
			return GetRuleContext<Cond_mod_tailContext>(0);
		}
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(OP_COND);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 221184L) != 0)) {
				{
				State = 209;
				condFunc();
				}
			}

			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEGATE) {
				{
				State = 212;
				cond_mod_neg();
				}
			}

			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAIL) {
				{
				State = 215;
				cond_mod_tail();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_jumpContext cond_mod_jump() {
			return GetRuleContext<Cond_mod_jumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_back_jumpContext cond_mod_back_jump() {
			return GetRuleContext<Cond_mod_back_jumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_whileContext cond_mod_while() {
			return GetRuleContext<Cond_mod_whileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_do_whileContext cond_mod_do_while() {
			return GetRuleContext<Cond_mod_do_whileContext>(0);
		}
		public CondFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFuncContext condFunc() {
		CondFuncContext _localctx = new CondFuncContext(Context, State);
		EnterRule(_localctx, 30, RULE_condFunc);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case F_SLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				cond_mod_jump();
				}
				break;
			case B_SLASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				cond_mod_back_jump();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220;
				cond_mod_while();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 221;
				cond_mod_do_while();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimellParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimellParser.OPMOD_POW, 0); }
		public OpModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpModsContext opMods() {
		OpModsContext _localctx = new OpModsContext(Context, State);
		EnterRule(_localctx, 32, RULE_opMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 224;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimellParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimellParser.OPMOD_POW, 0); }
		public AssignModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignModsContext assignMods() {
		AssignModsContext _localctx = new AssignModsContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPMOD_POW || _la==OPMOD_CUT) {
				{
				State = 227;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseNullaryOpContext baseNullaryOp() {
			return GetRuleContext<BaseNullaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public NullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullaryOpContext nullaryOp() {
		NullaryOpContext _localctx = new NullaryOpContext(Context, State);
		EnterRule(_localctx, 36, RULE_nullaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			baseNullaryOp();
			State = 231;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseUnaryOpContext baseUnaryOp() {
			return GetRuleContext<BaseUnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryAssignContext unaryAssign() {
			return GetRuleContext<UnaryAssignContext>(0);
		}
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 233;
				unaryAssign();
				}
			}

			State = 236;
			baseUnaryOp();
			State = 237;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PrimellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignModsContext assignMods() {
			return GetRuleContext<AssignModsContext>(0);
		}
		public UnaryAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryAssignContext unaryAssign() {
		UnaryAssignContext _localctx = new UnaryAssignContext(Context, State);
		EnterRule(_localctx, 40, RULE_unaryAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(ASSIGN);
			State = 240;
			assignMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseBinaryOpContext baseBinaryOp() {
			return GetRuleContext<BaseBinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 42, RULE_binaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			baseBinaryOp();
			State = 243;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_list_diffContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B_SLASH() { return GetToken(PrimellParser.B_SLASH, 0); }
		public Op_list_diffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_list_diff; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_list_diff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_list_diffContext op_list_diff() {
		Op_list_diffContext _localctx = new Op_list_diffContext(Context, State);
		EnterRule(_localctx, 44, RULE_op_list_diff);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(B_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_back_jumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B_SLASH() { return GetToken(PrimellParser.B_SLASH, 0); }
		public Cond_mod_back_jumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_back_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_back_jump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_back_jumpContext cond_mod_back_jump() {
		Cond_mod_back_jumpContext _localctx = new Cond_mod_back_jumpContext(Context, State);
		EnterRule(_localctx, 46, RULE_cond_mod_back_jump);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(B_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_divContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F_SLASH() { return GetToken(PrimellParser.F_SLASH, 0); }
		public Op_divContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_div; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_div(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_divContext op_div() {
		Op_divContext _localctx = new Op_divContext(Context, State);
		EnterRule(_localctx, 48, RULE_op_div);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(F_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_jumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F_SLASH() { return GetToken(PrimellParser.F_SLASH, 0); }
		public Cond_mod_jumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_jump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_jumpContext cond_mod_jump() {
		Cond_mod_jumpContext _localctx = new Cond_mod_jumpContext(Context, State);
		EnterRule(_localctx, 50, RULE_cond_mod_jump);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(F_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_maxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAIL() { return GetToken(PrimellParser.TAIL, 0); }
		public Op_maxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_max; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_max(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_maxContext op_max() {
		Op_maxContext _localctx = new Op_maxContext(Context, State);
		EnterRule(_localctx, 52, RULE_op_max);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(TAIL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_tailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAIL() { return GetToken(PrimellParser.TAIL, 0); }
		public Cond_mod_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_tailContext cond_mod_tail() {
		Cond_mod_tailContext _localctx = new Cond_mod_tailContext(Context, State);
		EnterRule(_localctx, 54, RULE_cond_mod_tail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(TAIL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_mulContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PrimellParser.STAR, 0); }
		public Op_mulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_mul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_mulContext op_mul() {
		Op_mulContext _localctx = new Op_mulContext(Context, State);
		EnterRule(_localctx, 56, RULE_op_mul);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PrimellParser.STAR, 0); }
		public Cond_mod_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_while(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_whileContext cond_mod_while() {
		Cond_mod_whileContext _localctx = new Cond_mod_whileContext(Context, State);
		EnterRule(_localctx, 58, RULE_cond_mod_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_addContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PrimellParser.PLUS, 0); }
		public Op_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_add(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_addContext op_add() {
		Op_addContext _localctx = new Op_addContext(Context, State);
		EnterRule(_localctx, 60, RULE_op_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_do_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PrimellParser.PLUS, 0); }
		public Cond_mod_do_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_do_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_do_while(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_do_whileContext cond_mod_do_while() {
		Cond_mod_do_whileContext _localctx = new Cond_mod_do_whileContext(Context, State);
		EnterRule(_localctx, 62, RULE_cond_mod_do_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_negContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATE() { return GetToken(PrimellParser.NEGATE, 0); }
		public Op_negContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_neg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_neg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_negContext op_neg() {
		Op_negContext _localctx = new Op_negContext(Context, State);
		EnterRule(_localctx, 64, RULE_op_neg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			Match(NEGATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_negContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATE() { return GetToken(PrimellParser.NEGATE, 0); }
		public Cond_mod_negContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_neg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_neg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_negContext cond_mod_neg() {
		Cond_mod_negContext _localctx = new Cond_mod_negContext(Context, State);
		EnterRule(_localctx, 66, RULE_cond_mod_neg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(NEGATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return mulTerm_sempred((MulTermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mulTerm_sempred(MulTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,31,270,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,3,0,71,8,0,1,
		0,3,0,74,8,0,1,0,1,0,1,1,1,1,1,2,4,2,81,8,2,11,2,12,2,82,1,3,3,3,86,8,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,96,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,111,8,4,3,4,113,8,4,1,5,1,5,1,5,3,5,118,
		8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,4,
		6,136,8,6,11,6,12,6,137,1,6,1,6,3,6,142,8,6,1,6,1,6,1,6,1,6,5,6,148,8,
		6,10,6,12,6,151,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
		7,165,8,7,1,8,1,8,3,8,169,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,3,9,182,8,9,1,10,1,10,1,10,5,10,187,8,10,10,10,12,10,190,9,10,1,11,
		1,11,1,12,1,12,1,12,3,12,197,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,3,13,207,8,13,1,14,1,14,3,14,211,8,14,1,14,3,14,214,8,14,1,14,3,14,
		217,8,14,1,15,1,15,1,15,1,15,3,15,223,8,15,1,16,3,16,226,8,16,1,17,3,17,
		229,8,17,1,18,1,18,1,18,1,19,3,19,235,8,19,1,19,1,19,1,19,1,20,1,20,1,
		20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
		27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,
		33,0,1,12,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,0,2,1,0,18,20,1,0,21,22,278,0,68,
		1,0,0,0,2,77,1,0,0,0,4,80,1,0,0,0,6,85,1,0,0,0,8,112,1,0,0,0,10,114,1,
		0,0,0,12,141,1,0,0,0,14,164,1,0,0,0,16,168,1,0,0,0,18,181,1,0,0,0,20,183,
		1,0,0,0,22,191,1,0,0,0,24,196,1,0,0,0,26,206,1,0,0,0,28,208,1,0,0,0,30,
		222,1,0,0,0,32,225,1,0,0,0,34,228,1,0,0,0,36,230,1,0,0,0,38,234,1,0,0,
		0,40,239,1,0,0,0,42,242,1,0,0,0,44,245,1,0,0,0,46,247,1,0,0,0,48,249,1,
		0,0,0,50,251,1,0,0,0,52,253,1,0,0,0,54,255,1,0,0,0,56,257,1,0,0,0,58,259,
		1,0,0,0,60,261,1,0,0,0,62,263,1,0,0,0,64,265,1,0,0,0,66,267,1,0,0,0,68,
		70,3,4,2,0,69,71,3,2,1,0,70,69,1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,
		74,5,31,0,0,73,72,1,0,0,0,73,74,1,0,0,0,74,75,1,0,0,0,75,76,5,0,0,1,76,
		1,1,0,0,0,77,78,7,0,0,0,78,3,1,0,0,0,79,81,3,6,3,0,80,79,1,0,0,0,81,82,
		1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,5,1,0,0,0,84,86,5,4,0,0,85,84,1,
		0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,88,3,8,4,0,88,7,1,0,0,0,89,113,3,
		12,6,0,90,91,3,12,6,0,91,95,3,10,5,0,92,96,3,8,4,0,93,94,5,2,0,0,94,96,
		3,4,2,0,95,92,1,0,0,0,95,93,1,0,0,0,96,113,1,0,0,0,97,98,3,12,6,0,98,99,
		3,10,5,0,99,100,5,6,0,0,100,101,3,4,2,0,101,102,5,7,0,0,102,113,1,0,0,
		0,103,104,5,6,0,0,104,105,3,4,2,0,105,106,5,7,0,0,106,110,3,10,5,0,107,
		111,3,8,4,0,108,109,5,2,0,0,109,111,3,4,2,0,110,107,1,0,0,0,110,108,1,
		0,0,0,111,113,1,0,0,0,112,89,1,0,0,0,112,90,1,0,0,0,112,97,1,0,0,0,112,
		103,1,0,0,0,113,9,1,0,0,0,114,115,5,5,0,0,115,117,3,34,17,0,116,118,3,
		42,21,0,117,116,1,0,0,0,117,118,1,0,0,0,118,11,1,0,0,0,119,120,6,6,-1,
		0,120,142,3,18,9,0,121,122,5,6,0,0,122,123,3,4,2,0,123,124,5,7,0,0,124,
		125,3,38,19,0,125,142,1,0,0,0,126,127,5,6,0,0,127,128,3,4,2,0,128,129,
		5,7,0,0,129,130,3,14,7,0,130,142,1,0,0,0,131,132,5,6,0,0,132,133,3,4,2,
		0,133,135,5,10,0,0,134,136,3,16,8,0,135,134,1,0,0,0,136,137,1,0,0,0,137,
		135,1,0,0,0,137,138,1,0,0,0,138,139,1,0,0,0,139,140,5,7,0,0,140,142,1,
		0,0,0,141,119,1,0,0,0,141,121,1,0,0,0,141,126,1,0,0,0,141,131,1,0,0,0,
		142,149,1,0,0,0,143,144,10,5,0,0,144,148,3,38,19,0,145,146,10,4,0,0,146,
		148,3,14,7,0,147,143,1,0,0,0,147,145,1,0,0,0,148,151,1,0,0,0,149,147,1,
		0,0,0,149,150,1,0,0,0,150,13,1,0,0,0,151,149,1,0,0,0,152,153,3,42,21,0,
		153,154,3,18,9,0,154,165,1,0,0,0,155,156,3,42,21,0,156,157,5,2,0,0,157,
		158,3,4,2,0,158,165,1,0,0,0,159,160,5,6,0,0,160,161,3,42,21,0,161,162,
		3,4,2,0,162,163,5,7,0,0,163,165,1,0,0,0,164,152,1,0,0,0,164,155,1,0,0,
		0,164,159,1,0,0,0,165,15,1,0,0,0,166,169,3,38,19,0,167,169,3,14,7,0,168,
		166,1,0,0,0,168,167,1,0,0,0,169,17,1,0,0,0,170,182,3,20,10,0,171,182,5,
		1,0,0,172,182,3,36,18,0,173,174,5,8,0,0,174,182,5,9,0,0,175,176,5,6,0,
		0,176,182,5,7,0,0,177,178,5,8,0,0,178,179,3,4,2,0,179,180,5,9,0,0,180,
		182,1,0,0,0,181,170,1,0,0,0,181,171,1,0,0,0,181,172,1,0,0,0,181,173,1,
		0,0,0,181,175,1,0,0,0,181,177,1,0,0,0,182,19,1,0,0,0,183,188,5,30,0,0,
		184,185,5,11,0,0,185,187,5,30,0,0,186,184,1,0,0,0,187,190,1,0,0,0,188,
		186,1,0,0,0,188,189,1,0,0,0,189,21,1,0,0,0,190,188,1,0,0,0,191,192,5,23,
		0,0,192,23,1,0,0,0,193,197,5,24,0,0,194,197,5,25,0,0,195,197,3,64,32,0,
		196,193,1,0,0,0,196,194,1,0,0,0,196,195,1,0,0,0,197,25,1,0,0,0,198,207,
		5,26,0,0,199,207,5,27,0,0,200,207,3,60,30,0,201,207,3,56,28,0,202,207,
		3,48,24,0,203,207,3,52,26,0,204,207,3,44,22,0,205,207,3,28,14,0,206,198,
		1,0,0,0,206,199,1,0,0,0,206,200,1,0,0,0,206,201,1,0,0,0,206,202,1,0,0,
		0,206,203,1,0,0,0,206,204,1,0,0,0,206,205,1,0,0,0,207,27,1,0,0,0,208,210,
		5,28,0,0,209,211,3,30,15,0,210,209,1,0,0,0,210,211,1,0,0,0,211,213,1,0,
		0,0,212,214,3,66,33,0,213,212,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,
		215,217,3,54,27,0,216,215,1,0,0,0,216,217,1,0,0,0,217,29,1,0,0,0,218,223,
		3,50,25,0,219,223,3,46,23,0,220,223,3,58,29,0,221,223,3,62,31,0,222,218,
		1,0,0,0,222,219,1,0,0,0,222,220,1,0,0,0,222,221,1,0,0,0,223,31,1,0,0,0,
		224,226,7,1,0,0,225,224,1,0,0,0,225,226,1,0,0,0,226,33,1,0,0,0,227,229,
		7,1,0,0,228,227,1,0,0,0,228,229,1,0,0,0,229,35,1,0,0,0,230,231,3,22,11,
		0,231,232,3,32,16,0,232,37,1,0,0,0,233,235,3,40,20,0,234,233,1,0,0,0,234,
		235,1,0,0,0,235,236,1,0,0,0,236,237,3,24,12,0,237,238,3,32,16,0,238,39,
		1,0,0,0,239,240,5,5,0,0,240,241,3,34,17,0,241,41,1,0,0,0,242,243,3,26,
		13,0,243,244,3,32,16,0,244,43,1,0,0,0,245,246,5,17,0,0,246,45,1,0,0,0,
		247,248,5,17,0,0,248,47,1,0,0,0,249,250,5,16,0,0,250,49,1,0,0,0,251,252,
		5,16,0,0,252,51,1,0,0,0,253,254,5,12,0,0,254,53,1,0,0,0,255,256,5,12,0,
		0,256,55,1,0,0,0,257,258,5,14,0,0,258,57,1,0,0,0,259,260,5,14,0,0,260,
		59,1,0,0,0,261,262,5,13,0,0,262,61,1,0,0,0,263,264,5,13,0,0,264,63,1,0,
		0,0,265,266,5,15,0,0,266,65,1,0,0,0,267,268,5,15,0,0,268,67,1,0,0,0,25,
		70,73,82,85,95,110,112,117,137,141,147,149,164,168,181,188,196,206,210,
		213,216,222,225,228,234
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
