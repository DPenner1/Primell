//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/darrell/Projects/Prime/Antlr4Generation/PrimellParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PrimellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, INFINITY=2, IDENTIFIER=3, RTL=4, CONCAT=5, ASSIGN=6, FOREACH_LEFT=7, 
		FOREACH_RIGHT=8, LPAREN=9, RPAREN=10, OUT_INV=11, OUT_DEF=12, OUT_STR=13, 
		OPMOD_POW=14, OPMOD_CUT=15, OPMOD_FOLD=16, COMMENT_START=17, OP_READ_CODE=18, 
		OP_READ_STR=19, OP_READ_CSV=20, OP_GAMMA=21, OP_NEXT=22, OP_PREV=23, OP_ROUND=24, 
		OP_NEGATE=25, OP_HEAD=26, OP_TAIL=27, OP_DISTINCT=28, OP_FLATTEN=29, OP_PURGE=30, 
		OP_REV=31, OP_SORT=32, OP_ADD=33, OP_SUB=34, OP_DIV=35, OP_MUL=36, OP_MOD=37, 
		OP_POW=38, OP_LOG=39, OP_INC_RANGE=40, OP_RANGE=41, OP_SMALL=42, OP_BIG=43, 
		OP_BIN_AND=44, OP_BIN_OR=45, OP_BIN_XOR=46, OP_BIN_NOT=47, OP_INDEX=48, 
		OP_INDEX_OF=49, OP_FILT=50, OP_NEG_FILT=51, OP_JUMP=52, OP_NEG_JUMP=53, 
		OP_JUMP_BACK=54, OP_NEG_JUMP_BACK=55, OP_COND=56, OP_NEG_COND=57, OP_LIST_DIFF=58, 
		OP_INTERSECT=59, OP_CONS=60, WS=61, COMMENT=62;
	public const int
		RULE_line = 0, RULE_outputSpec = 1, RULE_termSeq = 2, RULE_concatMulterm = 3, 
		RULE_mulTerm = 4, RULE_atomTerm = 5, RULE_baseNullaryOp = 6, RULE_baseNumUnaryOp = 7, 
		RULE_baseNumBinaryOp = 8, RULE_baseListUnaryOp = 9, RULE_baseListBinaryOp = 10, 
		RULE_opMods = 11, RULE_assignMods = 12, RULE_nullaryOp = 13, RULE_numUnaryOp = 14, 
		RULE_listUnaryOp = 15, RULE_binaryOp = 16;
	public static readonly string[] ruleNames = {
		"line", "outputSpec", "termSeq", "concatMulterm", "mulTerm", "atomTerm", 
		"baseNullaryOp", "baseNumUnaryOp", "baseNumBinaryOp", "baseListUnaryOp", 
		"baseListBinaryOp", "opMods", "assignMods", "nullaryOp", "numUnaryOp", 
		"listUnaryOp", "binaryOp"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'\\u221E'", null, "'$'", "';'", "'='", "'['", "']'", "'('", 
		"')'", "'\"~'", "'\"\"'", "'\"'", "'^'", "'`'", "'!'", "'~~'", "'_:'", 
		"':\"'", "':,'", "'\\u0393'", "'++'", "'--'", "'+-'", "'~'", "'_<'", "'_>'", 
		"'_*'", "'__'", "'_?'", "'_~'", "'_@'", "'+'", "'-'", "'/'", "'*'", "'%'", 
		"'**'", "'//'", "'\\u2026'", "'..'", "'<'", "'>'", "'`&'", "'`|'", "'`^'", 
		"'`~'", "'@'", "'@#'", "'*?'", "'*?~'", "'?/'", "'?~/'", "'?\\'", "'?~\\'", 
		"'?'", "'?~'", "'\\'", "'&'", "'::'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "INFINITY", "IDENTIFIER", "RTL", "CONCAT", "ASSIGN", "FOREACH_LEFT", 
		"FOREACH_RIGHT", "LPAREN", "RPAREN", "OUT_INV", "OUT_DEF", "OUT_STR", 
		"OPMOD_POW", "OPMOD_CUT", "OPMOD_FOLD", "COMMENT_START", "OP_READ_CODE", 
		"OP_READ_STR", "OP_READ_CSV", "OP_GAMMA", "OP_NEXT", "OP_PREV", "OP_ROUND", 
		"OP_NEGATE", "OP_HEAD", "OP_TAIL", "OP_DISTINCT", "OP_FLATTEN", "OP_PURGE", 
		"OP_REV", "OP_SORT", "OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", "OP_MOD", 
		"OP_POW", "OP_LOG", "OP_INC_RANGE", "OP_RANGE", "OP_SMALL", "OP_BIG", 
		"OP_BIN_AND", "OP_BIN_OR", "OP_BIN_XOR", "OP_BIN_NOT", "OP_INDEX", "OP_INDEX_OF", 
		"OP_FILT", "OP_NEG_FILT", "OP_JUMP", "OP_NEG_JUMP", "OP_JUMP_BACK", "OP_NEG_JUMP_BACK", 
		"OP_COND", "OP_NEG_COND", "OP_LIST_DIFF", "OP_INTERSECT", "OP_CONS", "WS", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PrimellParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrimellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PrimellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PrimellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PrimellParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputSpecContext outputSpec() {
			return GetRuleContext<OutputSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PrimellParser.COMMENT, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 0, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			termSeq();
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) {
				{
				State = 35;
				outputSpec();
				}
			}

			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 38;
				Match(COMMENT);
				}
			}

			State = 41;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_INV() { return GetToken(PrimellParser.OUT_INV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_DEF() { return GetToken(PrimellParser.OUT_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_STR() { return GetToken(PrimellParser.OUT_STR, 0); }
		public OutputSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputSpecContext outputSpec() {
		OutputSpecContext _localctx = new OutputSpecContext(Context, State);
		EnterRule(_localctx, 2, RULE_outputSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatMultermContext[] concatMulterm() {
			return GetRuleContexts<ConcatMultermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatMultermContext concatMulterm(int i) {
			return GetRuleContext<ConcatMultermContext>(i);
		}
		public TermSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermSeqContext termSeq() {
		TermSeqContext _localctx = new TermSeqContext(Context, State);
		EnterRule(_localctx, 4, RULE_termSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 45;
					concatMulterm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 48;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatMultermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(PrimellParser.CONCAT, 0); }
		public ConcatMultermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatMulterm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatMulterm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatMultermContext concatMulterm() {
		ConcatMultermContext _localctx = new ConcatMultermContext(Context, State);
		EnterRule(_localctx, 6, RULE_concatMulterm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONCAT) {
				{
				State = 50;
				Match(CONCAT);
				}
			}

			State = 53;
			mulTerm(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulTermContext : ParserRuleContext {
		public MulTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulTerm; } }
	 
		public MulTermContext() { }
		public virtual void CopyFrom(MulTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListUnaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListUnaryOpContext listUnaryOp() {
			return GetRuleContext<ListUnaryOpContext>(0);
		}
		public ListUnaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachBinaryContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_LEFT() { return GetToken(PrimellParser.FOREACH_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext[] termSeq() {
			return GetRuleContexts<TermSeqContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq(int i) {
			return GetRuleContext<TermSeqContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_RIGHT() { return GetToken(PrimellParser.FOREACH_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		public ForEachBinaryContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachRightTermContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_LEFT() { return GetToken(PrimellParser.FOREACH_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_RIGHT() { return GetToken(PrimellParser.FOREACH_RIGHT, 0); }
		public ForEachRightTermContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachRightTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		public BinaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		public AtomContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericUnaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumUnaryOpContext numUnaryOp() {
			return GetRuleContext<NumUnaryOpContext>(0);
		}
		public NumericUnaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachListUnaryContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_LEFT() { return GetToken(PrimellParser.FOREACH_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_RIGHT() { return GetToken(PrimellParser.FOREACH_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListUnaryOpContext listUnaryOp() {
			return GetRuleContext<ListUnaryOpContext>(0);
		}
		public ForEachListUnaryContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachListUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulTermContext mulTerm() {
		return mulTerm(0);
	}

	private MulTermContext mulTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MulTermContext _localctx = new MulTermContext(Context, _parentState);
		MulTermContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_mulTerm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new AtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 56;
				atomTerm();
				}
				break;
			case 2:
				{
				_localctx = new ForEachListUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57;
				Match(FOREACH_LEFT);
				State = 58;
				termSeq();
				State = 59;
				Match(FOREACH_RIGHT);
				State = 60;
				listUnaryOp();
				}
				break;
			case 3:
				{
				_localctx = new ForEachBinaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62;
				Match(FOREACH_LEFT);
				State = 63;
				termSeq();
				State = 64;
				Match(FOREACH_RIGHT);
				State = 65;
				binaryOp();
				State = 69;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case INFINITY:
				case IDENTIFIER:
				case LPAREN:
				case OP_READ_STR:
				case OP_READ_CSV:
					{
					State = 66;
					atomTerm();
					}
					break;
				case RTL:
					{
					State = 67;
					Match(RTL);
					State = 68;
					termSeq();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 90;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new NumericUnaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 73;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 74;
						numUnaryOp();
						}
						break;
					case 2:
						{
						_localctx = new ListUnaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 75;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 76;
						listUnaryOp();
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 77;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 78;
						binaryOp();
						State = 82;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case INT:
						case INFINITY:
						case IDENTIFIER:
						case LPAREN:
						case OP_READ_STR:
						case OP_READ_CSV:
							{
							State = 79;
							atomTerm();
							}
							break;
						case RTL:
							{
							State = 80;
							Match(RTL);
							State = 81;
							termSeq();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						_localctx = new ForEachRightTermContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 84;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 85;
						Match(FOREACH_LEFT);
						State = 86;
						binaryOp();
						State = 87;
						termSeq();
						State = 88;
						Match(FOREACH_RIGHT);
						}
						break;
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomTermContext : ParserRuleContext {
		public AtomTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomTerm; } }
	 
		public AtomTermContext() { }
		public virtual void CopyFrom(AtomTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullaryOperationContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullaryOpContext nullaryOp() {
			return GetRuleContext<NullaryOpContext>(0);
		}
		public NullaryOperationContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyListContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PrimellParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PrimellParser.RPAREN, 0); }
		public EmptyListContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PrimellParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PrimellParser.RPAREN, 0); }
		public ParensContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfinityContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFINITY() { return GetToken(PrimellParser.INFINITY, 0); }
		public InfinityContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfinity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PrimellParser.INT, 0); }
		public IntegerContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomTermContext atomTerm() {
		AtomTermContext _localctx = new AtomTermContext(Context, State);
		EnterRule(_localctx, 10, RULE_atomTerm);
		try {
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				Match(INT);
				}
				break;
			case 2:
				_localctx = new InfinityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				Match(INFINITY);
				}
				break;
			case 3:
				_localctx = new NullaryOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				nullaryOp();
				}
				break;
			case 4:
				_localctx = new EmptyListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 98;
				Match(LPAREN);
				State = 99;
				Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new ParensContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 100;
				Match(LPAREN);
				State = 101;
				termSeq();
				State = 102;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PrimellParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_READ_STR() { return GetToken(PrimellParser.OP_READ_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_READ_CSV() { return GetToken(PrimellParser.OP_READ_CSV, 0); }
		public BaseNullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNullaryOpContext baseNullaryOp() {
		BaseNullaryOpContext _localctx = new BaseNullaryOpContext(Context, State);
		EnterRule(_localctx, 12, RULE_baseNullaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1572872L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNumUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GAMMA() { return GetToken(PrimellParser.OP_GAMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEXT() { return GetToken(PrimellParser.OP_NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PREV() { return GetToken(PrimellParser.OP_PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ROUND() { return GetToken(PrimellParser.OP_ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEGATE() { return GetToken(PrimellParser.OP_NEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_NOT() { return GetToken(PrimellParser.OP_BIN_NOT, 0); }
		public BaseNumUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNumUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNumUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNumUnaryOpContext baseNumUnaryOp() {
		BaseNumUnaryOpContext _localctx = new BaseNumUnaryOpContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseNumUnaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 140737553367040L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNumBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(PrimellParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(PrimellParser.OP_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(PrimellParser.OP_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(PrimellParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MOD() { return GetToken(PrimellParser.OP_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_POW() { return GetToken(PrimellParser.OP_POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LOG() { return GetToken(PrimellParser.OP_LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SMALL() { return GetToken(PrimellParser.OP_SMALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIG() { return GetToken(PrimellParser.OP_BIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC_RANGE() { return GetToken(PrimellParser.OP_INC_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(PrimellParser.OP_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_AND() { return GetToken(PrimellParser.OP_BIN_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_OR() { return GetToken(PrimellParser.OP_BIN_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_XOR() { return GetToken(PrimellParser.OP_BIN_XOR, 0); }
		public BaseNumBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNumBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNumBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNumBinaryOpContext baseNumBinaryOp() {
		BaseNumBinaryOpContext _localctx = new BaseNumBinaryOpContext(Context, State);
		EnterRule(_localctx, 16, RULE_baseNumBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 140728898420736L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseListUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_HEAD() { return GetToken(PrimellParser.OP_HEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_TAIL() { return GetToken(PrimellParser.OP_TAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DISTINCT() { return GetToken(PrimellParser.OP_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REV() { return GetToken(PrimellParser.OP_REV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_FLATTEN() { return GetToken(PrimellParser.OP_FLATTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SORT() { return GetToken(PrimellParser.OP_SORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_READ_CODE() { return GetToken(PrimellParser.OP_READ_CODE, 0); }
		public BaseListUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseListUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseListUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseListUnaryOpContext baseListUnaryOp() {
		BaseListUnaryOpContext _localctx = new BaseListUnaryOpContext(Context, State);
		EnterRule(_localctx, 18, RULE_baseListUnaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7449346048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseListBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COND() { return GetToken(PrimellParser.OP_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEG_COND() { return GetToken(PrimellParser.OP_NEG_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INDEX() { return GetToken(PrimellParser.OP_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INDEX_OF() { return GetToken(PrimellParser.OP_INDEX_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_JUMP() { return GetToken(PrimellParser.OP_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_JUMP_BACK() { return GetToken(PrimellParser.OP_JUMP_BACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEG_JUMP() { return GetToken(PrimellParser.OP_NEG_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEG_JUMP_BACK() { return GetToken(PrimellParser.OP_NEG_JUMP_BACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LIST_DIFF() { return GetToken(PrimellParser.OP_LIST_DIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INTERSECT() { return GetToken(PrimellParser.OP_INTERSECT, 0); }
		public BaseListBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseListBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseListBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseListBinaryOpContext baseListBinaryOp() {
		BaseListBinaryOpContext _localctx = new BaseListBinaryOpContext(Context, State);
		EnterRule(_localctx, 20, RULE_baseListBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1149262329909608448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimellParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimellParser.OPMOD_POW, 0); }
		public OpModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpModsContext opMods() {
		OpModsContext _localctx = new OpModsContext(Context, State);
		EnterRule(_localctx, 22, RULE_opMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 116;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimellParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimellParser.OPMOD_POW, 0); }
		public AssignModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignModsContext assignMods() {
		AssignModsContext _localctx = new AssignModsContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPMOD_POW || _la==OPMOD_CUT) {
				{
				State = 119;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseNullaryOpContext baseNullaryOp() {
			return GetRuleContext<BaseNullaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public NullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullaryOpContext nullaryOp() {
		NullaryOpContext _localctx = new NullaryOpContext(Context, State);
		EnterRule(_localctx, 26, RULE_nullaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			baseNullaryOp();
			State = 123;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseNumUnaryOpContext baseNumUnaryOp() {
			return GetRuleContext<BaseNumUnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public NumUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumUnaryOpContext numUnaryOp() {
		NumUnaryOpContext _localctx = new NumUnaryOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_numUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			baseNumUnaryOp();
			State = 126;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseListUnaryOpContext baseListUnaryOp() {
			return GetRuleContext<BaseListUnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public ListUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListUnaryOpContext listUnaryOp() {
		ListUnaryOpContext _localctx = new ListUnaryOpContext(Context, State);
		EnterRule(_localctx, 30, RULE_listUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			baseListUnaryOp();
			State = 129;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PrimellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignModsContext assignMods() {
			return GetRuleContext<AssignModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseNumBinaryOpContext baseNumBinaryOp() {
			return GetRuleContext<BaseNumBinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseListBinaryOpContext baseListBinaryOp() {
			return GetRuleContext<BaseListBinaryOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 32, RULE_binaryOp);
		int _la;
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				Match(ASSIGN);
				State = 132;
				assignMods();
				}
				break;
			case OP_ADD:
			case OP_SUB:
			case OP_DIV:
			case OP_MUL:
			case OP_MOD:
			case OP_POW:
			case OP_LOG:
			case OP_INC_RANGE:
			case OP_RANGE:
			case OP_SMALL:
			case OP_BIG:
			case OP_BIN_AND:
			case OP_BIN_OR:
			case OP_BIN_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				baseNumBinaryOp();
				State = 134;
				opMods();
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 135;
					Match(ASSIGN);
					State = 136;
					assignMods();
					}
				}

				}
				break;
			case OP_INDEX:
			case OP_INDEX_OF:
			case OP_JUMP:
			case OP_NEG_JUMP:
			case OP_JUMP_BACK:
			case OP_NEG_JUMP_BACK:
			case OP_COND:
			case OP_NEG_COND:
			case OP_LIST_DIFF:
			case OP_INTERSECT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 139;
				baseListBinaryOp();
				State = 140;
				opMods();
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 141;
					Match(ASSIGN);
					State = 142;
					assignMods();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return mulTerm_sempred((MulTermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mulTerm_sempred(MulTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,62,148,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,1,0,3,0,37,8,0,1,0,3,0,40,8,0,1,0,1,0,1,1,1,1,
		1,2,4,2,47,8,2,11,2,12,2,48,1,3,3,3,52,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,70,8,4,3,4,72,8,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,3,4,83,8,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,91,8,4,
		10,4,12,4,94,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,105,8,5,1,6,1,
		6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,3,11,118,8,11,1,12,3,12,121,8,
		12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
		16,1,16,3,16,138,8,16,1,16,1,16,1,16,1,16,3,16,144,8,16,3,16,146,8,16,
		1,16,0,1,8,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,7,1,0,11,
		13,2,0,3,3,19,20,2,0,21,25,47,47,1,0,33,46,3,0,18,18,26,29,31,32,2,0,48,
		49,52,59,1,0,14,15,152,0,34,1,0,0,0,2,43,1,0,0,0,4,46,1,0,0,0,6,51,1,0,
		0,0,8,71,1,0,0,0,10,104,1,0,0,0,12,106,1,0,0,0,14,108,1,0,0,0,16,110,1,
		0,0,0,18,112,1,0,0,0,20,114,1,0,0,0,22,117,1,0,0,0,24,120,1,0,0,0,26,122,
		1,0,0,0,28,125,1,0,0,0,30,128,1,0,0,0,32,145,1,0,0,0,34,36,3,4,2,0,35,
		37,3,2,1,0,36,35,1,0,0,0,36,37,1,0,0,0,37,39,1,0,0,0,38,40,5,62,0,0,39,
		38,1,0,0,0,39,40,1,0,0,0,40,41,1,0,0,0,41,42,5,0,0,1,42,1,1,0,0,0,43,44,
		7,0,0,0,44,3,1,0,0,0,45,47,3,6,3,0,46,45,1,0,0,0,47,48,1,0,0,0,48,46,1,
		0,0,0,48,49,1,0,0,0,49,5,1,0,0,0,50,52,5,5,0,0,51,50,1,0,0,0,51,52,1,0,
		0,0,52,53,1,0,0,0,53,54,3,8,4,0,54,7,1,0,0,0,55,56,6,4,-1,0,56,72,3,10,
		5,0,57,58,5,7,0,0,58,59,3,4,2,0,59,60,5,8,0,0,60,61,3,30,15,0,61,72,1,
		0,0,0,62,63,5,7,0,0,63,64,3,4,2,0,64,65,5,8,0,0,65,69,3,32,16,0,66,70,
		3,10,5,0,67,68,5,4,0,0,68,70,3,4,2,0,69,66,1,0,0,0,69,67,1,0,0,0,70,72,
		1,0,0,0,71,55,1,0,0,0,71,57,1,0,0,0,71,62,1,0,0,0,72,92,1,0,0,0,73,74,
		10,6,0,0,74,91,3,28,14,0,75,76,10,5,0,0,76,91,3,30,15,0,77,78,10,4,0,0,
		78,82,3,32,16,0,79,83,3,10,5,0,80,81,5,4,0,0,81,83,3,4,2,0,82,79,1,0,0,
		0,82,80,1,0,0,0,83,91,1,0,0,0,84,85,10,1,0,0,85,86,5,7,0,0,86,87,3,32,
		16,0,87,88,3,4,2,0,88,89,5,8,0,0,89,91,1,0,0,0,90,73,1,0,0,0,90,75,1,0,
		0,0,90,77,1,0,0,0,90,84,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,0,
		0,0,93,9,1,0,0,0,94,92,1,0,0,0,95,105,5,1,0,0,96,105,5,2,0,0,97,105,3,
		26,13,0,98,99,5,9,0,0,99,105,5,10,0,0,100,101,5,9,0,0,101,102,3,4,2,0,
		102,103,5,10,0,0,103,105,1,0,0,0,104,95,1,0,0,0,104,96,1,0,0,0,104,97,
		1,0,0,0,104,98,1,0,0,0,104,100,1,0,0,0,105,11,1,0,0,0,106,107,7,1,0,0,
		107,13,1,0,0,0,108,109,7,2,0,0,109,15,1,0,0,0,110,111,7,3,0,0,111,17,1,
		0,0,0,112,113,7,4,0,0,113,19,1,0,0,0,114,115,7,5,0,0,115,21,1,0,0,0,116,
		118,7,6,0,0,117,116,1,0,0,0,117,118,1,0,0,0,118,23,1,0,0,0,119,121,7,6,
		0,0,120,119,1,0,0,0,120,121,1,0,0,0,121,25,1,0,0,0,122,123,3,12,6,0,123,
		124,3,22,11,0,124,27,1,0,0,0,125,126,3,14,7,0,126,127,3,22,11,0,127,29,
		1,0,0,0,128,129,3,18,9,0,129,130,3,22,11,0,130,31,1,0,0,0,131,132,5,6,
		0,0,132,146,3,24,12,0,133,134,3,16,8,0,134,137,3,22,11,0,135,136,5,6,0,
		0,136,138,3,24,12,0,137,135,1,0,0,0,137,138,1,0,0,0,138,146,1,0,0,0,139,
		140,3,20,10,0,140,143,3,22,11,0,141,142,5,6,0,0,142,144,3,24,12,0,143,
		141,1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,131,1,0,0,0,145,133,1,
		0,0,0,145,139,1,0,0,0,146,33,1,0,0,0,15,36,39,48,51,69,71,82,90,92,104,
		117,120,137,143,145
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
