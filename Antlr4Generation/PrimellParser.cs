//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/darrell/Projects/Primell/Antlr4Generation/PrimellParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PrimellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INFINITY=1, RTL=2, LTR=3, CONCAT=4, ASSIGN=5, L_BRACK=6, R_BRACK=7, L_PAREN=8, 
		R_PAREN=9, VERT_BAR=10, DOT=11, TAIL=12, PLUS=13, STAR=14, NEGATE=15, 
		F_SLASH=16, B_SLASH=17, D_QUOTE=18, OPMOD_POW=19, OPMOD_CUT=20, OP_NULLARY=21, 
		OP_UNARY=22, OP_USER_UNARY=23, OP_BINARY=24, OP_USER_BINARY=25, OP_COND=26, 
		WS=27, INT_OR_ID=28, COMMENT=29, STRING=30, InStr_D_QUOTE=31;
	public const int
		RULE_line = 0, RULE_termSeq = 1, RULE_concatRtlTerm = 2, RULE_rtlTerm = 3, 
		RULE_binaryAssign = 4, RULE_mulTerm = 5, RULE_binaryOpWithRS = 6, RULE_unaryOrBinaryOp = 7, 
		RULE_atomTerm = 8, RULE_intOrId = 9, RULE_baseNullaryOp = 10, RULE_baseUnaryOp = 11, 
		RULE_baseBinaryOp = 12, RULE_conditionalOp = 13, RULE_condFunc = 14, RULE_opMods = 15, 
		RULE_assignMods = 16, RULE_nullaryOp = 17, RULE_unaryOp = 18, RULE_unaryAssign = 19, 
		RULE_binaryOp = 20, RULE_op_list_diff = 21, RULE_cond_mod_back_jump = 22, 
		RULE_op_div = 23, RULE_cond_mod_jump = 24, RULE_op_max = 25, RULE_cond_mod_tail = 26, 
		RULE_op_mul = 27, RULE_cond_mod_while = 28, RULE_op_add = 29, RULE_cond_mod_do_while = 30, 
		RULE_op_neg = 31, RULE_cond_mod_neg = 32;
	public static readonly string[] ruleNames = {
		"line", "termSeq", "concatRtlTerm", "rtlTerm", "binaryAssign", "mulTerm", 
		"binaryOpWithRS", "unaryOrBinaryOp", "atomTerm", "intOrId", "baseNullaryOp", 
		"baseUnaryOp", "baseBinaryOp", "conditionalOp", "condFunc", "opMods", 
		"assignMods", "nullaryOp", "unaryOp", "unaryAssign", "binaryOp", "op_list_diff", 
		"cond_mod_back_jump", "op_div", "cond_mod_jump", "op_max", "cond_mod_tail", 
		"op_mul", "cond_mod_while", "op_add", "cond_mod_do_while", "op_neg", "cond_mod_neg"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\u221E'", "'$'", "'\\u20AC'", "';'", "'='", "'['", "']'", "'('", 
		"')'", "'|'", "'.'", "'>'", "'+'", "'*'", "'~'", "'/'", "'\\'", null, 
		"'^'", "'`'", null, null, null, null, null, "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INFINITY", "RTL", "LTR", "CONCAT", "ASSIGN", "L_BRACK", "R_BRACK", 
		"L_PAREN", "R_PAREN", "VERT_BAR", "DOT", "TAIL", "PLUS", "STAR", "NEGATE", 
		"F_SLASH", "B_SLASH", "D_QUOTE", "OPMOD_POW", "OPMOD_CUT", "OP_NULLARY", 
		"OP_UNARY", "OP_USER_UNARY", "OP_BINARY", "OP_USER_BINARY", "OP_COND", 
		"WS", "INT_OR_ID", "COMMENT", "STRING", "InStr_D_QUOTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PrimellParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrimellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PrimellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PrimellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PrimellParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PrimellParser.COMMENT, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 0, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			termSeq();
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 67;
				Match(COMMENT);
				}
			}

			State = 70;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatRtlTermContext[] concatRtlTerm() {
			return GetRuleContexts<ConcatRtlTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatRtlTermContext concatRtlTerm(int i) {
			return GetRuleContext<ConcatRtlTermContext>(i);
		}
		public TermSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermSeqContext termSeq() {
		TermSeqContext _localctx = new TermSeqContext(Context, State);
		EnterRule(_localctx, 2, RULE_termSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 72;
					concatRtlTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 75;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatRtlTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtlTermContext rtlTerm() {
			return GetRuleContext<RtlTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(PrimellParser.CONCAT, 0); }
		public ConcatRtlTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatRtlTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatRtlTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatRtlTermContext concatRtlTerm() {
		ConcatRtlTermContext _localctx = new ConcatRtlTermContext(Context, State);
		EnterRule(_localctx, 4, RULE_concatRtlTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONCAT) {
				{
				State = 77;
				Match(CONCAT);
				}
			}

			State = 80;
			rtlTerm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtlTermContext : ParserRuleContext {
		public RtlTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtlTerm; } }
	 
		public RtlTermContext() { }
		public virtual void CopyFrom(RtlTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StdAssignContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryAssignContext binaryAssign() {
			return GetRuleContext<BinaryAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtlTermContext rtlTerm() {
			return GetRuleContext<RtlTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		public StdAssignContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStdAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachLeftAssignContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext[] termSeq() {
			return GetRuleContexts<TermSeqContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq(int i) {
			return GetRuleContext<TermSeqContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryAssignContext binaryAssign() {
			return GetRuleContext<BinaryAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtlTermContext rtlTerm() {
			return GetRuleContext<RtlTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		public ForEachLeftAssignContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLeftAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachRightAssignContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryAssignContext binaryAssign() {
			return GetRuleContext<BinaryAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		public ForEachRightAssignContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachRightAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PassThroughRtlContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		public PassThroughRtlContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassThroughRtl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RtlTermContext rtlTerm() {
		RtlTermContext _localctx = new RtlTermContext(Context, State);
		EnterRule(_localctx, 6, RULE_rtlTerm);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new PassThroughRtlContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				mulTerm(0);
				}
				break;
			case 2:
				_localctx = new StdAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				mulTerm(0);
				State = 84;
				binaryAssign();
				State = 88;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INFINITY:
				case L_BRACK:
				case L_PAREN:
				case OP_NULLARY:
				case INT_OR_ID:
				case STRING:
					{
					State = 85;
					rtlTerm();
					}
					break;
				case RTL:
					{
					State = 86;
					Match(RTL);
					State = 87;
					termSeq();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new ForEachRightAssignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				mulTerm(0);
				State = 91;
				binaryAssign();
				State = 92;
				Match(L_BRACK);
				State = 93;
				termSeq();
				State = 94;
				Match(R_BRACK);
				}
				break;
			case 4:
				_localctx = new ForEachLeftAssignContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 96;
				Match(L_BRACK);
				State = 97;
				termSeq();
				State = 98;
				Match(R_BRACK);
				State = 99;
				binaryAssign();
				State = 103;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INFINITY:
				case L_BRACK:
				case L_PAREN:
				case OP_NULLARY:
				case INT_OR_ID:
				case STRING:
					{
					State = 100;
					rtlTerm();
					}
					break;
				case RTL:
					{
					State = 101;
					Match(RTL);
					State = 102;
					termSeq();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PrimellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignModsContext assignMods() {
			return GetRuleContext<AssignModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public BinaryAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryAssignContext binaryAssign() {
		BinaryAssignContext _localctx = new BinaryAssignContext(Context, State);
		EnterRule(_localctx, 8, RULE_binaryAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(ASSIGN);
			State = 108;
			assignMods();
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 117665792L) != 0)) {
				{
				State = 109;
				binaryOp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulTermContext : ParserRuleContext {
		public MulTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulTerm; } }
	 
		public MulTermContext() { }
		public virtual void CopyFrom(MulTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpWithRSContext binaryOpWithRS() {
			return GetRuleContext<BinaryOpWithRSContext>(0);
		}
		public BinaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachLeftBinaryContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpWithRSContext binaryOpWithRS() {
			return GetRuleContext<BinaryOpWithRSContext>(0);
		}
		public ForEachLeftBinaryContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLeftBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachChainContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERT_BAR() { return GetToken(PrimellParser.VERT_BAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOrBinaryOpContext[] unaryOrBinaryOp() {
			return GetRuleContexts<UnaryOrBinaryOpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOrBinaryOpContext unaryOrBinaryOp(int i) {
			return GetRuleContext<UnaryOrBinaryOpContext>(i);
		}
		public ForEachChainContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachChain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public UnaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PassThroughMulTermContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		public PassThroughMulTermContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassThroughMulTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachUnaryContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public ForEachUnaryContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulTermContext mulTerm() {
		return mulTerm(0);
	}

	private MulTermContext mulTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MulTermContext _localctx = new MulTermContext(Context, _parentState);
		MulTermContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_mulTerm, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				_localctx = new PassThroughMulTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 113;
				atomTerm();
				}
				break;
			case 2:
				{
				_localctx = new ForEachUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114;
				Match(L_BRACK);
				State = 115;
				termSeq();
				State = 116;
				Match(R_BRACK);
				State = 117;
				unaryOp();
				}
				break;
			case 3:
				{
				_localctx = new ForEachLeftBinaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				Match(L_BRACK);
				State = 120;
				termSeq();
				State = 121;
				Match(R_BRACK);
				State = 122;
				binaryOpWithRS();
				}
				break;
			case 4:
				{
				_localctx = new ForEachChainContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 124;
				Match(L_BRACK);
				State = 125;
				termSeq();
				State = 126;
				Match(VERT_BAR);
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 127;
					unaryOrBinaryOp();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 130281568L) != 0) );
				State = 132;
				Match(R_BRACK);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 142;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 140;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new UnaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 136;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 137;
						unaryOp();
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 138;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 139;
						binaryOpWithRS();
						}
						break;
					}
					} 
				}
				State = 144;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryOpWithRSContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		public BinaryOpWithRSContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOpWithRS; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOpWithRS(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpWithRSContext binaryOpWithRS() {
		BinaryOpWithRSContext _localctx = new BinaryOpWithRSContext(Context, State);
		EnterRule(_localctx, 12, RULE_binaryOpWithRS);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145;
				binaryOp();
				State = 146;
				atomTerm();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				binaryOp();
				State = 149;
				Match(RTL);
				State = 150;
				termSeq();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				Match(L_BRACK);
				State = 153;
				binaryOp();
				State = 154;
				termSeq();
				State = 155;
				Match(R_BRACK);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOrBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpWithRSContext binaryOpWithRS() {
			return GetRuleContext<BinaryOpWithRSContext>(0);
		}
		public UnaryOrBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOrBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOrBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOrBinaryOpContext unaryOrBinaryOp() {
		UnaryOrBinaryOpContext _localctx = new UnaryOrBinaryOpContext(Context, State);
		EnterRule(_localctx, 14, RULE_unaryOrBinaryOp);
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
			case NEGATE:
			case OP_UNARY:
			case OP_USER_UNARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 159;
				unaryOp();
				}
				break;
			case L_BRACK:
			case TAIL:
			case PLUS:
			case STAR:
			case F_SLASH:
			case B_SLASH:
			case OP_BINARY:
			case OP_USER_BINARY:
			case OP_COND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				binaryOpWithRS();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomTermContext : ParserRuleContext {
		public AtomTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomTerm; } }
	 
		public AtomTermContext() { }
		public virtual void CopyFrom(AtomTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntegerOrIdentifierContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntOrIdContext intOrId() {
			return GetRuleContext<IntOrIdContext>(0);
		}
		public IntegerOrIdentifierContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerOrIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullaryOperationContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullaryOpContext nullaryOp() {
			return GetRuleContext<NullaryOpContext>(0);
		}
		public NullaryOperationContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyListContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(PrimellParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(PrimellParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACK() { return GetToken(PrimellParser.L_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACK() { return GetToken(PrimellParser.R_BRACK, 0); }
		public EmptyListContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(PrimellParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(PrimellParser.R_PAREN, 0); }
		public ParensContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PrimellParser.STRING, 0); }
		public StringContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfinityContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFINITY() { return GetToken(PrimellParser.INFINITY, 0); }
		public InfinityContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfinity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomTermContext atomTerm() {
		AtomTermContext _localctx = new AtomTermContext(Context, State);
		EnterRule(_localctx, 16, RULE_atomTerm);
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new IntegerOrIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				intOrId();
				}
				break;
			case 2:
				_localctx = new InfinityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				Match(INFINITY);
				}
				break;
			case 3:
				_localctx = new NullaryOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				nullaryOp();
				}
				break;
			case 4:
				_localctx = new EmptyListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 166;
				Match(L_PAREN);
				State = 167;
				Match(R_PAREN);
				}
				break;
			case 5:
				_localctx = new EmptyListContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 168;
				Match(L_BRACK);
				State = 169;
				Match(R_BRACK);
				}
				break;
			case 6:
				_localctx = new ParensContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 170;
				Match(L_PAREN);
				State = 171;
				termSeq();
				State = 172;
				Match(R_PAREN);
				}
				break;
			case 7:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 174;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntOrIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_OR_ID() { return GetTokens(PrimellParser.INT_OR_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_OR_ID(int i) {
			return GetToken(PrimellParser.INT_OR_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(PrimellParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(PrimellParser.DOT, i);
		}
		public IntOrIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intOrId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntOrId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntOrIdContext intOrId() {
		IntOrIdContext _localctx = new IntOrIdContext(Context, State);
		EnterRule(_localctx, 18, RULE_intOrId);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(INT_OR_ID);
			State = 182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 178;
					Match(DOT);
					State = 179;
					Match(INT_OR_ID);
					}
					} 
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NULLARY() { return GetToken(PrimellParser.OP_NULLARY, 0); }
		public BaseNullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNullaryOpContext baseNullaryOp() {
		BaseNullaryOpContext _localctx = new BaseNullaryOpContext(Context, State);
		EnterRule(_localctx, 20, RULE_baseNullaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(OP_NULLARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_UNARY() { return GetToken(PrimellParser.OP_UNARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_USER_UNARY() { return GetToken(PrimellParser.OP_USER_UNARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Op_negContext op_neg() {
			return GetRuleContext<Op_negContext>(0);
		}
		public BaseUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseUnaryOpContext baseUnaryOp() {
		BaseUnaryOpContext _localctx = new BaseUnaryOpContext(Context, State);
		EnterRule(_localctx, 22, RULE_baseUnaryOp);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_UNARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187;
				Match(OP_UNARY);
				}
				break;
			case OP_USER_UNARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188;
				Match(OP_USER_UNARY);
				}
				break;
			case NEGATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 189;
				op_neg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BINARY() { return GetToken(PrimellParser.OP_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_USER_BINARY() { return GetToken(PrimellParser.OP_USER_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Op_addContext op_add() {
			return GetRuleContext<Op_addContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_mulContext op_mul() {
			return GetRuleContext<Op_mulContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_divContext op_div() {
			return GetRuleContext<Op_divContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_maxContext op_max() {
			return GetRuleContext<Op_maxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Op_list_diffContext op_list_diff() {
			return GetRuleContext<Op_list_diffContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOpContext conditionalOp() {
			return GetRuleContext<ConditionalOpContext>(0);
		}
		public BaseBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseBinaryOpContext baseBinaryOp() {
		BaseBinaryOpContext _localctx = new BaseBinaryOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_baseBinaryOp);
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(OP_BINARY);
				}
				break;
			case OP_USER_BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				Match(OP_USER_BINARY);
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 194;
				op_add();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 195;
				op_mul();
				}
				break;
			case F_SLASH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 196;
				op_div();
				}
				break;
			case TAIL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 197;
				op_max();
				}
				break;
			case B_SLASH:
				EnterOuterAlt(_localctx, 7);
				{
				State = 198;
				op_list_diff();
				}
				break;
			case OP_COND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 199;
				conditionalOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COND() { return GetToken(PrimellParser.OP_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondFuncContext condFunc() {
			return GetRuleContext<CondFuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_negContext cond_mod_neg() {
			return GetRuleContext<Cond_mod_negContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_tailContext cond_mod_tail() {
			return GetRuleContext<Cond_mod_tailContext>(0);
		}
		public ConditionalOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOpContext conditionalOp() {
		ConditionalOpContext _localctx = new ConditionalOpContext(Context, State);
		EnterRule(_localctx, 26, RULE_conditionalOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(OP_COND);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 221184L) != 0)) {
				{
				State = 203;
				condFunc();
				}
			}

			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEGATE) {
				{
				State = 206;
				cond_mod_neg();
				}
			}

			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAIL) {
				{
				State = 209;
				cond_mod_tail();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_jumpContext cond_mod_jump() {
			return GetRuleContext<Cond_mod_jumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_back_jumpContext cond_mod_back_jump() {
			return GetRuleContext<Cond_mod_back_jumpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_whileContext cond_mod_while() {
			return GetRuleContext<Cond_mod_whileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cond_mod_do_whileContext cond_mod_do_while() {
			return GetRuleContext<Cond_mod_do_whileContext>(0);
		}
		public CondFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFuncContext condFunc() {
		CondFuncContext _localctx = new CondFuncContext(Context, State);
		EnterRule(_localctx, 28, RULE_condFunc);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case F_SLASH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				cond_mod_jump();
				}
				break;
			case B_SLASH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				cond_mod_back_jump();
				}
				break;
			case STAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 214;
				cond_mod_while();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 215;
				cond_mod_do_while();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimellParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimellParser.OPMOD_POW, 0); }
		public OpModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpModsContext opMods() {
		OpModsContext _localctx = new OpModsContext(Context, State);
		EnterRule(_localctx, 30, RULE_opMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 218;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimellParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimellParser.OPMOD_POW, 0); }
		public AssignModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignModsContext assignMods() {
		AssignModsContext _localctx = new AssignModsContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPMOD_POW || _la==OPMOD_CUT) {
				{
				State = 221;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseNullaryOpContext baseNullaryOp() {
			return GetRuleContext<BaseNullaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public NullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullaryOpContext nullaryOp() {
		NullaryOpContext _localctx = new NullaryOpContext(Context, State);
		EnterRule(_localctx, 34, RULE_nullaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			baseNullaryOp();
			State = 225;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseUnaryOpContext baseUnaryOp() {
			return GetRuleContext<BaseUnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryAssignContext unaryAssign() {
			return GetRuleContext<UnaryAssignContext>(0);
		}
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 36, RULE_unaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 227;
				unaryAssign();
				}
			}

			State = 230;
			baseUnaryOp();
			State = 231;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PrimellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignModsContext assignMods() {
			return GetRuleContext<AssignModsContext>(0);
		}
		public UnaryAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryAssignContext unaryAssign() {
		UnaryAssignContext _localctx = new UnaryAssignContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(ASSIGN);
			State = 234;
			assignMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseBinaryOpContext baseBinaryOp() {
			return GetRuleContext<BaseBinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 40, RULE_binaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			baseBinaryOp();
			State = 237;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_list_diffContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B_SLASH() { return GetToken(PrimellParser.B_SLASH, 0); }
		public Op_list_diffContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_list_diff; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_list_diff(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_list_diffContext op_list_diff() {
		Op_list_diffContext _localctx = new Op_list_diffContext(Context, State);
		EnterRule(_localctx, 42, RULE_op_list_diff);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(B_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_back_jumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B_SLASH() { return GetToken(PrimellParser.B_SLASH, 0); }
		public Cond_mod_back_jumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_back_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_back_jump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_back_jumpContext cond_mod_back_jump() {
		Cond_mod_back_jumpContext _localctx = new Cond_mod_back_jumpContext(Context, State);
		EnterRule(_localctx, 44, RULE_cond_mod_back_jump);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(B_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_divContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F_SLASH() { return GetToken(PrimellParser.F_SLASH, 0); }
		public Op_divContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_div; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_div(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_divContext op_div() {
		Op_divContext _localctx = new Op_divContext(Context, State);
		EnterRule(_localctx, 46, RULE_op_div);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(F_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_jumpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode F_SLASH() { return GetToken(PrimellParser.F_SLASH, 0); }
		public Cond_mod_jumpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_jump; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_jump(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_jumpContext cond_mod_jump() {
		Cond_mod_jumpContext _localctx = new Cond_mod_jumpContext(Context, State);
		EnterRule(_localctx, 48, RULE_cond_mod_jump);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			Match(F_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_maxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAIL() { return GetToken(PrimellParser.TAIL, 0); }
		public Op_maxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_max; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_max(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_maxContext op_max() {
		Op_maxContext _localctx = new Op_maxContext(Context, State);
		EnterRule(_localctx, 50, RULE_op_max);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(TAIL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_tailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAIL() { return GetToken(PrimellParser.TAIL, 0); }
		public Cond_mod_tailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_tail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_tail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_tailContext cond_mod_tail() {
		Cond_mod_tailContext _localctx = new Cond_mod_tailContext(Context, State);
		EnterRule(_localctx, 52, RULE_cond_mod_tail);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(TAIL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_mulContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PrimellParser.STAR, 0); }
		public Op_mulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_mul; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_mul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_mulContext op_mul() {
		Op_mulContext _localctx = new Op_mulContext(Context, State);
		EnterRule(_localctx, 54, RULE_op_mul);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(PrimellParser.STAR, 0); }
		public Cond_mod_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_while(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_whileContext cond_mod_while() {
		Cond_mod_whileContext _localctx = new Cond_mod_whileContext(Context, State);
		EnterRule(_localctx, 56, RULE_cond_mod_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_addContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PrimellParser.PLUS, 0); }
		public Op_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_add(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_addContext op_add() {
		Op_addContext _localctx = new Op_addContext(Context, State);
		EnterRule(_localctx, 58, RULE_op_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_do_whileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(PrimellParser.PLUS, 0); }
		public Cond_mod_do_whileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_do_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_do_while(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_do_whileContext cond_mod_do_while() {
		Cond_mod_do_whileContext _localctx = new Cond_mod_do_whileContext(Context, State);
		EnterRule(_localctx, 60, RULE_cond_mod_do_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			Match(PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_negContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATE() { return GetToken(PrimellParser.NEGATE, 0); }
		public Op_negContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_neg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_neg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_negContext op_neg() {
		Op_negContext _localctx = new Op_negContext(Context, State);
		EnterRule(_localctx, 62, RULE_op_neg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(NEGATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cond_mod_negContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEGATE() { return GetToken(PrimellParser.NEGATE, 0); }
		public Cond_mod_negContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond_mod_neg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond_mod_neg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cond_mod_negContext cond_mod_neg() {
		Cond_mod_negContext _localctx = new Cond_mod_negContext(Context, State);
		EnterRule(_localctx, 64, RULE_cond_mod_neg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(NEGATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return mulTerm_sempred((MulTermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mulTerm_sempred(MulTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,31,264,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,3,0,69,8,0,1,0,1,0,1,1,
		4,1,74,8,1,11,1,12,1,75,1,2,3,2,79,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
		3,3,89,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,104,
		8,3,3,3,106,8,3,1,4,1,4,1,4,3,4,111,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,4,5,129,8,5,11,5,12,5,130,1,5,1,5,3,
		5,135,8,5,1,5,1,5,1,5,1,5,5,5,141,8,5,10,5,12,5,144,9,5,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,158,8,6,1,7,1,7,3,7,162,8,7,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,176,8,8,1,9,1,9,1,9,5,
		9,181,8,9,10,9,12,9,184,9,9,1,10,1,10,1,11,1,11,1,11,3,11,191,8,11,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,201,8,12,1,13,1,13,3,13,205,8,
		13,1,13,3,13,208,8,13,1,13,3,13,211,8,13,1,14,1,14,1,14,1,14,3,14,217,
		8,14,1,15,3,15,220,8,15,1,16,3,16,223,8,16,1,17,1,17,1,17,1,18,3,18,229,
		8,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,
		1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
		1,30,1,30,1,31,1,31,1,32,1,32,1,32,0,1,10,33,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,0,
		1,1,0,19,20,273,0,66,1,0,0,0,2,73,1,0,0,0,4,78,1,0,0,0,6,105,1,0,0,0,8,
		107,1,0,0,0,10,134,1,0,0,0,12,157,1,0,0,0,14,161,1,0,0,0,16,175,1,0,0,
		0,18,177,1,0,0,0,20,185,1,0,0,0,22,190,1,0,0,0,24,200,1,0,0,0,26,202,1,
		0,0,0,28,216,1,0,0,0,30,219,1,0,0,0,32,222,1,0,0,0,34,224,1,0,0,0,36,228,
		1,0,0,0,38,233,1,0,0,0,40,236,1,0,0,0,42,239,1,0,0,0,44,241,1,0,0,0,46,
		243,1,0,0,0,48,245,1,0,0,0,50,247,1,0,0,0,52,249,1,0,0,0,54,251,1,0,0,
		0,56,253,1,0,0,0,58,255,1,0,0,0,60,257,1,0,0,0,62,259,1,0,0,0,64,261,1,
		0,0,0,66,68,3,2,1,0,67,69,5,29,0,0,68,67,1,0,0,0,68,69,1,0,0,0,69,70,1,
		0,0,0,70,71,5,0,0,1,71,1,1,0,0,0,72,74,3,4,2,0,73,72,1,0,0,0,74,75,1,0,
		0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,3,1,0,0,0,77,79,5,4,0,0,78,77,1,0,0,
		0,78,79,1,0,0,0,79,80,1,0,0,0,80,81,3,6,3,0,81,5,1,0,0,0,82,106,3,10,5,
		0,83,84,3,10,5,0,84,88,3,8,4,0,85,89,3,6,3,0,86,87,5,2,0,0,87,89,3,2,1,
		0,88,85,1,0,0,0,88,86,1,0,0,0,89,106,1,0,0,0,90,91,3,10,5,0,91,92,3,8,
		4,0,92,93,5,6,0,0,93,94,3,2,1,0,94,95,5,7,0,0,95,106,1,0,0,0,96,97,5,6,
		0,0,97,98,3,2,1,0,98,99,5,7,0,0,99,103,3,8,4,0,100,104,3,6,3,0,101,102,
		5,2,0,0,102,104,3,2,1,0,103,100,1,0,0,0,103,101,1,0,0,0,104,106,1,0,0,
		0,105,82,1,0,0,0,105,83,1,0,0,0,105,90,1,0,0,0,105,96,1,0,0,0,106,7,1,
		0,0,0,107,108,5,5,0,0,108,110,3,32,16,0,109,111,3,40,20,0,110,109,1,0,
		0,0,110,111,1,0,0,0,111,9,1,0,0,0,112,113,6,5,-1,0,113,135,3,16,8,0,114,
		115,5,6,0,0,115,116,3,2,1,0,116,117,5,7,0,0,117,118,3,36,18,0,118,135,
		1,0,0,0,119,120,5,6,0,0,120,121,3,2,1,0,121,122,5,7,0,0,122,123,3,12,6,
		0,123,135,1,0,0,0,124,125,5,6,0,0,125,126,3,2,1,0,126,128,5,10,0,0,127,
		129,3,14,7,0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,
		0,0,0,131,132,1,0,0,0,132,133,5,7,0,0,133,135,1,0,0,0,134,112,1,0,0,0,
		134,114,1,0,0,0,134,119,1,0,0,0,134,124,1,0,0,0,135,142,1,0,0,0,136,137,
		10,5,0,0,137,141,3,36,18,0,138,139,10,4,0,0,139,141,3,12,6,0,140,136,1,
		0,0,0,140,138,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,
		143,11,1,0,0,0,144,142,1,0,0,0,145,146,3,40,20,0,146,147,3,16,8,0,147,
		158,1,0,0,0,148,149,3,40,20,0,149,150,5,2,0,0,150,151,3,2,1,0,151,158,
		1,0,0,0,152,153,5,6,0,0,153,154,3,40,20,0,154,155,3,2,1,0,155,156,5,7,
		0,0,156,158,1,0,0,0,157,145,1,0,0,0,157,148,1,0,0,0,157,152,1,0,0,0,158,
		13,1,0,0,0,159,162,3,36,18,0,160,162,3,12,6,0,161,159,1,0,0,0,161,160,
		1,0,0,0,162,15,1,0,0,0,163,176,3,18,9,0,164,176,5,1,0,0,165,176,3,34,17,
		0,166,167,5,8,0,0,167,176,5,9,0,0,168,169,5,6,0,0,169,176,5,7,0,0,170,
		171,5,8,0,0,171,172,3,2,1,0,172,173,5,9,0,0,173,176,1,0,0,0,174,176,5,
		30,0,0,175,163,1,0,0,0,175,164,1,0,0,0,175,165,1,0,0,0,175,166,1,0,0,0,
		175,168,1,0,0,0,175,170,1,0,0,0,175,174,1,0,0,0,176,17,1,0,0,0,177,182,
		5,28,0,0,178,179,5,11,0,0,179,181,5,28,0,0,180,178,1,0,0,0,181,184,1,0,
		0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,19,1,0,0,0,184,182,1,0,0,0,185,
		186,5,21,0,0,186,21,1,0,0,0,187,191,5,22,0,0,188,191,5,23,0,0,189,191,
		3,62,31,0,190,187,1,0,0,0,190,188,1,0,0,0,190,189,1,0,0,0,191,23,1,0,0,
		0,192,201,5,24,0,0,193,201,5,25,0,0,194,201,3,58,29,0,195,201,3,54,27,
		0,196,201,3,46,23,0,197,201,3,50,25,0,198,201,3,42,21,0,199,201,3,26,13,
		0,200,192,1,0,0,0,200,193,1,0,0,0,200,194,1,0,0,0,200,195,1,0,0,0,200,
		196,1,0,0,0,200,197,1,0,0,0,200,198,1,0,0,0,200,199,1,0,0,0,201,25,1,0,
		0,0,202,204,5,26,0,0,203,205,3,28,14,0,204,203,1,0,0,0,204,205,1,0,0,0,
		205,207,1,0,0,0,206,208,3,64,32,0,207,206,1,0,0,0,207,208,1,0,0,0,208,
		210,1,0,0,0,209,211,3,52,26,0,210,209,1,0,0,0,210,211,1,0,0,0,211,27,1,
		0,0,0,212,217,3,48,24,0,213,217,3,44,22,0,214,217,3,56,28,0,215,217,3,
		60,30,0,216,212,1,0,0,0,216,213,1,0,0,0,216,214,1,0,0,0,216,215,1,0,0,
		0,217,29,1,0,0,0,218,220,7,0,0,0,219,218,1,0,0,0,219,220,1,0,0,0,220,31,
		1,0,0,0,221,223,7,0,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,33,1,0,0,0,
		224,225,3,20,10,0,225,226,3,30,15,0,226,35,1,0,0,0,227,229,3,38,19,0,228,
		227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,231,3,22,11,0,231,232,
		3,30,15,0,232,37,1,0,0,0,233,234,5,5,0,0,234,235,3,32,16,0,235,39,1,0,
		0,0,236,237,3,24,12,0,237,238,3,30,15,0,238,41,1,0,0,0,239,240,5,17,0,
		0,240,43,1,0,0,0,241,242,5,17,0,0,242,45,1,0,0,0,243,244,5,16,0,0,244,
		47,1,0,0,0,245,246,5,16,0,0,246,49,1,0,0,0,247,248,5,12,0,0,248,51,1,0,
		0,0,249,250,5,12,0,0,250,53,1,0,0,0,251,252,5,14,0,0,252,55,1,0,0,0,253,
		254,5,14,0,0,254,57,1,0,0,0,255,256,5,13,0,0,256,59,1,0,0,0,257,258,5,
		13,0,0,258,61,1,0,0,0,259,260,5,15,0,0,260,63,1,0,0,0,261,262,5,15,0,0,
		262,65,1,0,0,0,24,68,75,78,88,103,105,110,130,134,140,142,157,161,175,
		182,190,200,204,207,210,216,219,222,228
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
