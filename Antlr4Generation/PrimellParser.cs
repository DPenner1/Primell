//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/darrell/Projects/Prime/Antlr4Generation/PrimellParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PrimellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, INFINITY=2, IDENTIFIER=3, RTL=4, LTR=5, CONCAT=6, ASSIGN=7, FOREACH_LEFT=8, 
		FOREACH_RIGHT=9, LPAREN=10, RPAREN=11, OUT_INV=12, OUT_DEF=13, OUT_STR=14, 
		OPMOD_POW=15, OPMOD_CUT=16, OPMOD_FOLD=17, COMMENT_START=18, OP_READ_CODE=19, 
		OP_READ_STR=20, OP_READ_CSV=21, OP_GAMMA=22, OP_NEXT=23, OP_PREV=24, OP_ROUND=25, 
		OP_NEGATE=26, OP_HEAD=27, OP_TAIL=28, OP_DISTINCT=29, OP_FLATTEN=30, OP_PURGE=31, 
		OP_REV=32, OP_SORT=33, OP_ADD=34, OP_SUB=35, OP_DIV=36, OP_MUL=37, OP_MOD=38, 
		OP_POW=39, OP_LOG=40, OP_INC_RANGE=41, OP_RANGE=42, OP_SMALL=43, OP_BIG=44, 
		OP_BIN_AND=45, OP_BIN_OR=46, OP_BIN_XOR=47, OP_BIN_NOT=48, OP_INDEX=49, 
		OP_INDEX_OF=50, OP_FILT=51, OP_NEG_FILT=52, OP_JUMP=53, OP_NEG_JUMP=54, 
		OP_JUMP_BACK=55, OP_NEG_JUMP_BACK=56, OP_COND=57, OP_NEG_COND=58, OP_LIST_DIFF=59, 
		OP_INTERSECT=60, OP_CONS=61, WS=62, COMMENT=63;
	public const int
		RULE_line = 0, RULE_outputSpec = 1, RULE_termSeq = 2, RULE_concatRtlTerm = 3, 
		RULE_rtlTerm = 4, RULE_binaryAssign = 5, RULE_mulTerm = 6, RULE_atomTerm = 7, 
		RULE_baseNullaryOp = 8, RULE_baseNumUnaryOp = 9, RULE_baseNumBinaryOp = 10, 
		RULE_baseListUnaryOp = 11, RULE_baseListBinaryOp = 12, RULE_baseListNumericOp = 13, 
		RULE_baseNumericListOp = 14, RULE_opMods = 15, RULE_assignMods = 16, RULE_nullaryOp = 17, 
		RULE_unaryOp = 18, RULE_baseUnaryOp = 19, RULE_binaryOp = 20, RULE_baseBinaryOp = 21;
	public static readonly string[] ruleNames = {
		"line", "outputSpec", "termSeq", "concatRtlTerm", "rtlTerm", "binaryAssign", 
		"mulTerm", "atomTerm", "baseNullaryOp", "baseNumUnaryOp", "baseNumBinaryOp", 
		"baseListUnaryOp", "baseListBinaryOp", "baseListNumericOp", "baseNumericListOp", 
		"opMods", "assignMods", "nullaryOp", "unaryOp", "baseUnaryOp", "binaryOp", 
		"baseBinaryOp"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'\\u221E'", null, "'$'", "'\\u20AC'", "';'", "'='", "'['", 
		"']'", "'('", "')'", "'\"~'", "'\"\"'", "'\"'", "'^'", "'`'", "'!'", "'~~'", 
		"'_:'", "':\"'", "':,'", "'\\u0393'", "'++'", "'--'", "'+-'", "'~'", "'_<'", 
		"'_>'", "'_*'", "'__'", "'_?'", "'_~'", "'_@'", "'+'", "'-'", "'/'", "'*'", 
		"'%'", "'**'", "'//'", "'\\u2026'", "'..'", "'<'", "'>'", "'`&'", "'`|'", 
		"'`^'", "'`~'", "'@'", "'@#'", "'*?'", "'*?~'", "'?/'", "'?~/'", "'?\\'", 
		"'?~\\'", "'?'", "'?~'", "'\\'", "'&'", "'::'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "INFINITY", "IDENTIFIER", "RTL", "LTR", "CONCAT", "ASSIGN", 
		"FOREACH_LEFT", "FOREACH_RIGHT", "LPAREN", "RPAREN", "OUT_INV", "OUT_DEF", 
		"OUT_STR", "OPMOD_POW", "OPMOD_CUT", "OPMOD_FOLD", "COMMENT_START", "OP_READ_CODE", 
		"OP_READ_STR", "OP_READ_CSV", "OP_GAMMA", "OP_NEXT", "OP_PREV", "OP_ROUND", 
		"OP_NEGATE", "OP_HEAD", "OP_TAIL", "OP_DISTINCT", "OP_FLATTEN", "OP_PURGE", 
		"OP_REV", "OP_SORT", "OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", "OP_MOD", 
		"OP_POW", "OP_LOG", "OP_INC_RANGE", "OP_RANGE", "OP_SMALL", "OP_BIG", 
		"OP_BIN_AND", "OP_BIN_OR", "OP_BIN_XOR", "OP_BIN_NOT", "OP_INDEX", "OP_INDEX_OF", 
		"OP_FILT", "OP_NEG_FILT", "OP_JUMP", "OP_NEG_JUMP", "OP_JUMP_BACK", "OP_NEG_JUMP_BACK", 
		"OP_COND", "OP_NEG_COND", "OP_LIST_DIFF", "OP_INTERSECT", "OP_CONS", "WS", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PrimellParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrimellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PrimellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PrimellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PrimellParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputSpecContext outputSpec() {
			return GetRuleContext<OutputSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(PrimellParser.COMMENT, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 0, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			termSeq();
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) {
				{
				State = 45;
				outputSpec();
				}
			}

			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 48;
				Match(COMMENT);
				}
			}

			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_INV() { return GetToken(PrimellParser.OUT_INV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_DEF() { return GetToken(PrimellParser.OUT_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_STR() { return GetToken(PrimellParser.OUT_STR, 0); }
		public OutputSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputSpecContext outputSpec() {
		OutputSpecContext _localctx = new OutputSpecContext(Context, State);
		EnterRule(_localctx, 2, RULE_outputSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 28672L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConcatRtlTermContext[] concatRtlTerm() {
			return GetRuleContexts<ConcatRtlTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConcatRtlTermContext concatRtlTerm(int i) {
			return GetRuleContext<ConcatRtlTermContext>(i);
		}
		public TermSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermSeqContext termSeq() {
		TermSeqContext _localctx = new TermSeqContext(Context, State);
		EnterRule(_localctx, 4, RULE_termSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 55;
					concatRtlTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 58;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatRtlTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RtlTermContext rtlTerm() {
			return GetRuleContext<RtlTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(PrimellParser.CONCAT, 0); }
		public ConcatRtlTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatRtlTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatRtlTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatRtlTermContext concatRtlTerm() {
		ConcatRtlTermContext _localctx = new ConcatRtlTermContext(Context, State);
		EnterRule(_localctx, 6, RULE_concatRtlTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONCAT) {
				{
				State = 60;
				Match(CONCAT);
				}
			}

			State = 63;
			rtlTerm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RtlTermContext : ParserRuleContext {
		public RtlTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rtlTerm; } }
	 
		public RtlTermContext() { }
		public virtual void CopyFrom(RtlTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StdAssignContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryAssignContext binaryAssign() {
			return GetRuleContext<BinaryAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RtlTermContext rtlTerm() {
			return GetRuleContext<RtlTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		public StdAssignContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStdAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachLeftAssignContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_LEFT() { return GetToken(PrimellParser.FOREACH_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext[] termSeq() {
			return GetRuleContexts<TermSeqContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq(int i) {
			return GetRuleContext<TermSeqContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryAssignContext binaryAssign() {
			return GetRuleContext<BinaryAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_RIGHT() { return GetToken(PrimellParser.FOREACH_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RtlTermContext rtlTerm() {
			return GetRuleContext<RtlTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		public ForEachLeftAssignContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLeftAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachRightAssignContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_LEFT() { return GetToken(PrimellParser.FOREACH_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryAssignContext binaryAssign() {
			return GetRuleContext<BinaryAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_RIGHT() { return GetToken(PrimellParser.FOREACH_RIGHT, 0); }
		public ForEachRightAssignContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachRightAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PassThroughRtlContext : RtlTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		public PassThroughRtlContext(RtlTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassThroughRtl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RtlTermContext rtlTerm() {
		RtlTermContext _localctx = new RtlTermContext(Context, State);
		EnterRule(_localctx, 8, RULE_rtlTerm);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new PassThroughRtlContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				mulTerm(0);
				}
				break;
			case 2:
				_localctx = new StdAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				mulTerm(0);
				State = 67;
				binaryAssign();
				State = 71;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case INFINITY:
				case IDENTIFIER:
				case FOREACH_LEFT:
				case LPAREN:
				case OP_READ_STR:
				case OP_READ_CSV:
					{
					State = 68;
					rtlTerm();
					}
					break;
				case RTL:
					{
					State = 69;
					Match(RTL);
					State = 70;
					termSeq();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new ForEachRightAssignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 73;
				mulTerm(0);
				State = 74;
				Match(FOREACH_LEFT);
				State = 75;
				binaryAssign();
				State = 76;
				termSeq();
				State = 77;
				Match(FOREACH_RIGHT);
				}
				break;
			case 4:
				_localctx = new ForEachLeftAssignContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 79;
				Match(FOREACH_LEFT);
				State = 80;
				termSeq();
				State = 81;
				binaryAssign();
				State = 82;
				Match(FOREACH_RIGHT);
				State = 86;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case INFINITY:
				case IDENTIFIER:
				case FOREACH_LEFT:
				case LPAREN:
				case OP_READ_STR:
				case OP_READ_CSV:
					{
					State = 83;
					rtlTerm();
					}
					break;
				case RTL:
					{
					State = 84;
					Match(RTL);
					State = 85;
					termSeq();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PrimellParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignModsContext assignMods() {
			return GetRuleContext<AssignModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		public BinaryAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryAssignContext binaryAssign() {
		BinaryAssignContext _localctx = new BinaryAssignContext(Context, State);
		EnterRule(_localctx, 10, RULE_binaryAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(ASSIGN);
			State = 91;
			assignMods();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4604649126829752320L) != 0)) {
				{
				State = 92;
				binaryOp();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulTermContext : ParserRuleContext {
		public MulTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulTerm; } }
	 
		public MulTermContext() { }
		public virtual void CopyFrom(MulTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PassThroughContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		public PassThroughContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassThrough(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachRightBinaryContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_LEFT() { return GetToken(PrimellParser.FOREACH_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_RIGHT() { return GetToken(PrimellParser.FOREACH_RIGHT, 0); }
		public ForEachRightBinaryContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachRightBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		public BinaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachLeftBinaryContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_LEFT() { return GetToken(PrimellParser.FOREACH_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext[] termSeq() {
			return GetRuleContexts<TermSeqContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq(int i) {
			return GetRuleContext<TermSeqContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_RIGHT() { return GetToken(PrimellParser.FOREACH_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimellParser.RTL, 0); }
		public ForEachLeftBinaryContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLeftBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public UnaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachUnaryContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_LEFT() { return GetToken(PrimellParser.FOREACH_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREACH_RIGHT() { return GetToken(PrimellParser.FOREACH_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOpContext unaryOp() {
			return GetRuleContext<UnaryOpContext>(0);
		}
		public ForEachUnaryContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulTermContext mulTerm() {
		return mulTerm(0);
	}

	private MulTermContext mulTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MulTermContext _localctx = new MulTermContext(Context, _parentState);
		MulTermContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_mulTerm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new PassThroughContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 96;
				atomTerm();
				}
				break;
			case 2:
				{
				_localctx = new ForEachUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 97;
				Match(FOREACH_LEFT);
				State = 98;
				termSeq();
				State = 99;
				Match(FOREACH_RIGHT);
				State = 100;
				unaryOp();
				}
				break;
			case 3:
				{
				_localctx = new ForEachLeftBinaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102;
				Match(FOREACH_LEFT);
				State = 103;
				termSeq();
				State = 104;
				binaryOp();
				State = 105;
				Match(FOREACH_RIGHT);
				State = 109;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT:
				case INFINITY:
				case IDENTIFIER:
				case LPAREN:
				case OP_READ_STR:
				case OP_READ_CSV:
					{
					State = 106;
					atomTerm();
					}
					break;
				case RTL:
					{
					State = 107;
					Match(RTL);
					State = 108;
					termSeq();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 130;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 128;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new UnaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 113;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 114;
						unaryOp();
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 115;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 116;
						binaryOp();
						State = 120;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case INT:
						case INFINITY:
						case IDENTIFIER:
						case LPAREN:
						case OP_READ_STR:
						case OP_READ_CSV:
							{
							State = 117;
							atomTerm();
							}
							break;
						case RTL:
							{
							State = 118;
							Match(RTL);
							State = 119;
							termSeq();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						_localctx = new ForEachRightBinaryContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 122;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 123;
						Match(FOREACH_LEFT);
						State = 124;
						binaryOp();
						State = 125;
						termSeq();
						State = 126;
						Match(FOREACH_RIGHT);
						}
						break;
					}
					} 
				}
				State = 132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomTermContext : ParserRuleContext {
		public AtomTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomTerm; } }
	 
		public AtomTermContext() { }
		public virtual void CopyFrom(AtomTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullaryOperationContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullaryOpContext nullaryOp() {
			return GetRuleContext<NullaryOpContext>(0);
		}
		public NullaryOperationContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyListContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PrimellParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PrimellParser.RPAREN, 0); }
		public EmptyListContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(PrimellParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(PrimellParser.RPAREN, 0); }
		public ParensContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InfinityContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFINITY() { return GetToken(PrimellParser.INFINITY, 0); }
		public InfinityContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfinity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PrimellParser.INT, 0); }
		public IntegerContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomTermContext atomTerm() {
		AtomTermContext _localctx = new AtomTermContext(Context, State);
		EnterRule(_localctx, 14, RULE_atomTerm);
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 133;
				Match(INT);
				}
				break;
			case 2:
				_localctx = new InfinityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				Match(INFINITY);
				}
				break;
			case 3:
				_localctx = new NullaryOperationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 135;
				nullaryOp();
				}
				break;
			case 4:
				_localctx = new EmptyListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 136;
				Match(LPAREN);
				State = 137;
				Match(RPAREN);
				}
				break;
			case 5:
				_localctx = new ParensContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 138;
				Match(LPAREN);
				State = 139;
				termSeq();
				State = 140;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(PrimellParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_READ_STR() { return GetToken(PrimellParser.OP_READ_STR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_READ_CSV() { return GetToken(PrimellParser.OP_READ_CSV, 0); }
		public BaseNullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNullaryOpContext baseNullaryOp() {
		BaseNullaryOpContext _localctx = new BaseNullaryOpContext(Context, State);
		EnterRule(_localctx, 16, RULE_baseNullaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3145736L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNumUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_GAMMA() { return GetToken(PrimellParser.OP_GAMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEXT() { return GetToken(PrimellParser.OP_NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PREV() { return GetToken(PrimellParser.OP_PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ROUND() { return GetToken(PrimellParser.OP_ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEGATE() { return GetToken(PrimellParser.OP_NEGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_NOT() { return GetToken(PrimellParser.OP_BIN_NOT, 0); }
		public BaseNumUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNumUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNumUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNumUnaryOpContext baseNumUnaryOp() {
		BaseNumUnaryOpContext _localctx = new BaseNumUnaryOpContext(Context, State);
		EnterRule(_localctx, 18, RULE_baseNumUnaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475106734080L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNumBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(PrimellParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(PrimellParser.OP_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(PrimellParser.OP_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(PrimellParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MOD() { return GetToken(PrimellParser.OP_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_POW() { return GetToken(PrimellParser.OP_POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LOG() { return GetToken(PrimellParser.OP_LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SMALL() { return GetToken(PrimellParser.OP_SMALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIG() { return GetToken(PrimellParser.OP_BIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC_RANGE() { return GetToken(PrimellParser.OP_INC_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(PrimellParser.OP_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_AND() { return GetToken(PrimellParser.OP_BIN_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_OR() { return GetToken(PrimellParser.OP_BIN_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_XOR() { return GetToken(PrimellParser.OP_BIN_XOR, 0); }
		public BaseNumBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNumBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNumBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNumBinaryOpContext baseNumBinaryOp() {
		BaseNumBinaryOpContext _localctx = new BaseNumBinaryOpContext(Context, State);
		EnterRule(_localctx, 20, RULE_baseNumBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 281457796841472L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseListUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_HEAD() { return GetToken(PrimellParser.OP_HEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_TAIL() { return GetToken(PrimellParser.OP_TAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DISTINCT() { return GetToken(PrimellParser.OP_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REV() { return GetToken(PrimellParser.OP_REV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_FLATTEN() { return GetToken(PrimellParser.OP_FLATTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SORT() { return GetToken(PrimellParser.OP_SORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_READ_CODE() { return GetToken(PrimellParser.OP_READ_CODE, 0); }
		public BaseListUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseListUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseListUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseListUnaryOpContext baseListUnaryOp() {
		BaseListUnaryOpContext _localctx = new BaseListUnaryOpContext(Context, State);
		EnterRule(_localctx, 22, RULE_baseListUnaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14898692096L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseListBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COND() { return GetToken(PrimellParser.OP_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEG_COND() { return GetToken(PrimellParser.OP_NEG_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INDEX_OF() { return GetToken(PrimellParser.OP_INDEX_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_JUMP() { return GetToken(PrimellParser.OP_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_JUMP_BACK() { return GetToken(PrimellParser.OP_JUMP_BACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEG_JUMP() { return GetToken(PrimellParser.OP_NEG_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEG_JUMP_BACK() { return GetToken(PrimellParser.OP_NEG_JUMP_BACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LIST_DIFF() { return GetToken(PrimellParser.OP_LIST_DIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INTERSECT() { return GetToken(PrimellParser.OP_INTERSECT, 0); }
		public BaseListBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseListBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseListBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseListBinaryOpContext baseListBinaryOp() {
		BaseListBinaryOpContext _localctx = new BaseListBinaryOpContext(Context, State);
		EnterRule(_localctx, 24, RULE_baseListBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2297961709865795584L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseListNumericOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INDEX() { return GetToken(PrimellParser.OP_INDEX, 0); }
		public BaseListNumericOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseListNumericOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseListNumericOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseListNumericOpContext baseListNumericOp() {
		BaseListNumericOpContext _localctx = new BaseListNumericOpContext(Context, State);
		EnterRule(_localctx, 26, RULE_baseListNumericOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(OP_INDEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNumericListOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_CONS() { return GetToken(PrimellParser.OP_CONS, 0); }
		public BaseNumericListOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNumericListOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNumericListOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNumericListOpContext baseNumericListOp() {
		BaseNumericListOpContext _localctx = new BaseNumericListOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_baseNumericListOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(OP_CONS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimellParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimellParser.OPMOD_POW, 0); }
		public OpModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpModsContext opMods() {
		OpModsContext _localctx = new OpModsContext(Context, State);
		EnterRule(_localctx, 30, RULE_opMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 158;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimellParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimellParser.OPMOD_POW, 0); }
		public AssignModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignModsContext assignMods() {
		AssignModsContext _localctx = new AssignModsContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPMOD_POW || _la==OPMOD_CUT) {
				{
				State = 161;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseNullaryOpContext baseNullaryOp() {
			return GetRuleContext<BaseNullaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public NullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullaryOpContext nullaryOp() {
		NullaryOpContext _localctx = new NullaryOpContext(Context, State);
		EnterRule(_localctx, 34, RULE_nullaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			baseNullaryOp();
			State = 165;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseUnaryOpContext baseUnaryOp() {
			return GetRuleContext<BaseUnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public UnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOpContext unaryOp() {
		UnaryOpContext _localctx = new UnaryOpContext(Context, State);
		EnterRule(_localctx, 36, RULE_unaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			baseUnaryOp();
			State = 168;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseNumUnaryOpContext baseNumUnaryOp() {
			return GetRuleContext<BaseNumUnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseListUnaryOpContext baseListUnaryOp() {
			return GetRuleContext<BaseListUnaryOpContext>(0);
		}
		public BaseUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseUnaryOpContext baseUnaryOp() {
		BaseUnaryOpContext _localctx = new BaseUnaryOpContext(Context, State);
		EnterRule(_localctx, 38, RULE_baseUnaryOp);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_GAMMA:
			case OP_NEXT:
			case OP_PREV:
			case OP_ROUND:
			case OP_NEGATE:
			case OP_BIN_NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				baseNumUnaryOp();
				}
				break;
			case OP_READ_CODE:
			case OP_HEAD:
			case OP_TAIL:
			case OP_DISTINCT:
			case OP_FLATTEN:
			case OP_REV:
			case OP_SORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				baseListUnaryOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseBinaryOpContext baseBinaryOp() {
			return GetRuleContext<BaseBinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 40, RULE_binaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			baseBinaryOp();
			State = 175;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseNumBinaryOpContext baseNumBinaryOp() {
			return GetRuleContext<BaseNumBinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseListBinaryOpContext baseListBinaryOp() {
			return GetRuleContext<BaseListBinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseListNumericOpContext baseListNumericOp() {
			return GetRuleContext<BaseListNumericOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseNumericListOpContext baseNumericListOp() {
			return GetRuleContext<BaseNumericListOpContext>(0);
		}
		public BaseBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimellParserVisitor<TResult> typedVisitor = visitor as IPrimellParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseBinaryOpContext baseBinaryOp() {
		BaseBinaryOpContext _localctx = new BaseBinaryOpContext(Context, State);
		EnterRule(_localctx, 42, RULE_baseBinaryOp);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_ADD:
			case OP_SUB:
			case OP_DIV:
			case OP_MUL:
			case OP_MOD:
			case OP_POW:
			case OP_LOG:
			case OP_INC_RANGE:
			case OP_RANGE:
			case OP_SMALL:
			case OP_BIG:
			case OP_BIN_AND:
			case OP_BIN_OR:
			case OP_BIN_XOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				baseNumBinaryOp();
				}
				break;
			case OP_INDEX_OF:
			case OP_JUMP:
			case OP_NEG_JUMP:
			case OP_JUMP_BACK:
			case OP_NEG_JUMP_BACK:
			case OP_COND:
			case OP_NEG_COND:
			case OP_LIST_DIFF:
			case OP_INTERSECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				baseListBinaryOp();
				}
				break;
			case OP_INDEX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179;
				baseListNumericOp();
				}
				break;
			case OP_CONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 180;
				baseNumericListOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return mulTerm_sempred((MulTermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mulTerm_sempred(MulTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,63,184,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,3,0,47,8,0,1,0,3,0,50,8,0,1,0,1,0,1,1,1,1,1,2,4,2,57,8,2,11,2,
		12,2,58,1,3,3,3,62,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,72,8,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,87,8,4,3,4,89,8,4,
		1,5,1,5,1,5,3,5,94,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,3,6,110,8,6,3,6,112,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,121,8,
		6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,129,8,6,10,6,12,6,132,9,6,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,3,7,143,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,14,1,14,1,15,3,15,160,8,15,1,16,3,16,163,8,16,1,
		17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,3,19,173,8,19,1,20,1,20,1,20,1,21,
		1,21,1,21,1,21,3,21,182,8,21,1,21,0,1,12,22,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,0,7,1,0,12,14,2,0,3,3,20,21,2,0,22,26,
		48,48,1,0,34,47,3,0,19,19,27,30,32,33,2,0,50,50,53,60,1,0,15,16,188,0,
		44,1,0,0,0,2,53,1,0,0,0,4,56,1,0,0,0,6,61,1,0,0,0,8,88,1,0,0,0,10,90,1,
		0,0,0,12,111,1,0,0,0,14,142,1,0,0,0,16,144,1,0,0,0,18,146,1,0,0,0,20,148,
		1,0,0,0,22,150,1,0,0,0,24,152,1,0,0,0,26,154,1,0,0,0,28,156,1,0,0,0,30,
		159,1,0,0,0,32,162,1,0,0,0,34,164,1,0,0,0,36,167,1,0,0,0,38,172,1,0,0,
		0,40,174,1,0,0,0,42,181,1,0,0,0,44,46,3,4,2,0,45,47,3,2,1,0,46,45,1,0,
		0,0,46,47,1,0,0,0,47,49,1,0,0,0,48,50,5,63,0,0,49,48,1,0,0,0,49,50,1,0,
		0,0,50,51,1,0,0,0,51,52,5,0,0,1,52,1,1,0,0,0,53,54,7,0,0,0,54,3,1,0,0,
		0,55,57,3,6,3,0,56,55,1,0,0,0,57,58,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,
		0,59,5,1,0,0,0,60,62,5,6,0,0,61,60,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,
		63,64,3,8,4,0,64,7,1,0,0,0,65,89,3,12,6,0,66,67,3,12,6,0,67,71,3,10,5,
		0,68,72,3,8,4,0,69,70,5,4,0,0,70,72,3,4,2,0,71,68,1,0,0,0,71,69,1,0,0,
		0,72,89,1,0,0,0,73,74,3,12,6,0,74,75,5,8,0,0,75,76,3,10,5,0,76,77,3,4,
		2,0,77,78,5,9,0,0,78,89,1,0,0,0,79,80,5,8,0,0,80,81,3,4,2,0,81,82,3,10,
		5,0,82,86,5,9,0,0,83,87,3,8,4,0,84,85,5,4,0,0,85,87,3,4,2,0,86,83,1,0,
		0,0,86,84,1,0,0,0,87,89,1,0,0,0,88,65,1,0,0,0,88,66,1,0,0,0,88,73,1,0,
		0,0,88,79,1,0,0,0,89,9,1,0,0,0,90,91,5,7,0,0,91,93,3,32,16,0,92,94,3,40,
		20,0,93,92,1,0,0,0,93,94,1,0,0,0,94,11,1,0,0,0,95,96,6,6,-1,0,96,112,3,
		14,7,0,97,98,5,8,0,0,98,99,3,4,2,0,99,100,5,9,0,0,100,101,3,36,18,0,101,
		112,1,0,0,0,102,103,5,8,0,0,103,104,3,4,2,0,104,105,3,40,20,0,105,109,
		5,9,0,0,106,110,3,14,7,0,107,108,5,4,0,0,108,110,3,4,2,0,109,106,1,0,0,
		0,109,107,1,0,0,0,110,112,1,0,0,0,111,95,1,0,0,0,111,97,1,0,0,0,111,102,
		1,0,0,0,112,130,1,0,0,0,113,114,10,5,0,0,114,129,3,36,18,0,115,116,10,
		4,0,0,116,120,3,40,20,0,117,121,3,14,7,0,118,119,5,4,0,0,119,121,3,4,2,
		0,120,117,1,0,0,0,120,118,1,0,0,0,121,129,1,0,0,0,122,123,10,1,0,0,123,
		124,5,8,0,0,124,125,3,40,20,0,125,126,3,4,2,0,126,127,5,9,0,0,127,129,
		1,0,0,0,128,113,1,0,0,0,128,115,1,0,0,0,128,122,1,0,0,0,129,132,1,0,0,
		0,130,128,1,0,0,0,130,131,1,0,0,0,131,13,1,0,0,0,132,130,1,0,0,0,133,143,
		5,1,0,0,134,143,5,2,0,0,135,143,3,34,17,0,136,137,5,10,0,0,137,143,5,11,
		0,0,138,139,5,10,0,0,139,140,3,4,2,0,140,141,5,11,0,0,141,143,1,0,0,0,
		142,133,1,0,0,0,142,134,1,0,0,0,142,135,1,0,0,0,142,136,1,0,0,0,142,138,
		1,0,0,0,143,15,1,0,0,0,144,145,7,1,0,0,145,17,1,0,0,0,146,147,7,2,0,0,
		147,19,1,0,0,0,148,149,7,3,0,0,149,21,1,0,0,0,150,151,7,4,0,0,151,23,1,
		0,0,0,152,153,7,5,0,0,153,25,1,0,0,0,154,155,5,49,0,0,155,27,1,0,0,0,156,
		157,5,61,0,0,157,29,1,0,0,0,158,160,7,6,0,0,159,158,1,0,0,0,159,160,1,
		0,0,0,160,31,1,0,0,0,161,163,7,6,0,0,162,161,1,0,0,0,162,163,1,0,0,0,163,
		33,1,0,0,0,164,165,3,16,8,0,165,166,3,30,15,0,166,35,1,0,0,0,167,168,3,
		38,19,0,168,169,3,30,15,0,169,37,1,0,0,0,170,173,3,18,9,0,171,173,3,22,
		11,0,172,170,1,0,0,0,172,171,1,0,0,0,173,39,1,0,0,0,174,175,3,42,21,0,
		175,176,3,30,15,0,176,41,1,0,0,0,177,182,3,20,10,0,178,182,3,24,12,0,179,
		182,3,26,13,0,180,182,3,28,14,0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,
		1,0,0,0,181,180,1,0,0,0,182,43,1,0,0,0,18,46,49,58,61,71,86,88,93,109,
		111,120,128,130,142,159,162,172,181
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
