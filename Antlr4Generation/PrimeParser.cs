//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/darrell/Projects/Prime/Antlr4Generation/Prime.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PrimeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, INT=7, RTL=8, ASSIGN=9, 
		USER_OP=10, OP_VAR1=11, OP_VAR2=12, OP_VAR3=13, OP_READ_LIST=14, OP_READ_STR=15, 
		OP_FACT=16, OP_NEXT=17, OP_PREV=18, OP_ROUND=19, OP_NEGATE=20, OP_HEAD=21, 
		OP_TAIL=22, OP_DISTINCT=23, OP_FLATTEN=24, OP_PURGE=25, OP_REV=26, OP_SORT=27, 
		OP_ADD=28, OP_SUB=29, OP_DIV=30, OP_MUL=31, OP_MOD=32, OP_POW=33, OP_LOG=34, 
		OP_INC_RANGE=35, OP_RANGE=36, OP_SMALL=37, OP_BIG=38, OP_BIN_AND=39, OP_BIN_OR=40, 
		OP_BIN_XOR=41, OP_BIN_NOT=42, OP_LSHIFT=43, OP_RSHIFT=44, OP_LROTATE=45, 
		OP_RROTATE=46, OP_INDEX=47, OP_INDEX_END=48, OP_INDEX_OF=49, OP_FILT=50, 
		OP_NEG_FILT=51, OP_JUMP=52, OP_NEG_JUMP=53, OP_JUMP_BACK=54, OP_NEG_JUMP_BACK=55, 
		OP_COND=56, OP_NEG_COND=57, OP_LIST_DIFF=58, OP_INTERSECT=59, OUT_INV=60, 
		OUT_DEF=61, OUT_STR=62, OPMOD_POW=63, OPMOD_CUT=64, OPMOD_FOLD=65, WS=66, 
		NL=67;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_termSeq = 2, RULE_mulTerm = 3, RULE_atomTerm = 4, 
		RULE_forEachBlock = 5, RULE_forEachOperation = 6, RULE_baseNullaryOp = 7, 
		RULE_baseNumUnaryOp = 8, RULE_baseNumBinaryOp = 9, RULE_baseListUnaryOp = 10, 
		RULE_baseListBinaryOp = 11, RULE_opMods = 12, RULE_assignMods = 13, RULE_nullaryOp = 14, 
		RULE_numUnaryOp = 15, RULE_listUnaryOp = 16, RULE_binaryOp = 17, RULE_outMethod = 18;
	public static readonly string[] ruleNames = {
		"program", "line", "termSeq", "mulTerm", "atomTerm", "forEachBlock", "forEachOperation", 
		"baseNullaryOp", "baseNumUnaryOp", "baseNumBinaryOp", "baseListUnaryOp", 
		"baseListBinaryOp", "opMods", "assignMods", "nullaryOp", "numUnaryOp", 
		"listUnaryOp", "binaryOp", "outMethod"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'-\\u221E'", "'\\u221E'", "'('", "')'", null, "'$'", 
		"'='", "'\\u03BB'", "','", "';'", "'#'", "':_'", "':~'", "'\\u0393'", 
		"'++'", "'--'", "'+-'", "'~'", "'_<'", "'_>'", "'_*'", "'__'", "'_?'", 
		"'_~'", "'_@'", "'+'", "'-'", "'/'", "'*'", "'%'", "'**'", "'//'", "'\\u2026'", 
		"'..'", "'<'", "'>'", "'`&'", "'`|'", "'`^'", "'`~'", "'<<'", "'>>'", 
		"'<<<'", "'>>>'", "'@'", "'@>'", "'@#'", "'*?'", "'*?~'", "'?/'", "'?~/'", 
		"'?\\'", "'?~\\'", "'?'", "'?~'", "'\\'", "'&'", "'\"~'", "'\"\"'", "'\"'", 
		"'^'", "'`'", "'!'", null, "'\\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "INT", "RTL", "ASSIGN", "USER_OP", 
		"OP_VAR1", "OP_VAR2", "OP_VAR3", "OP_READ_LIST", "OP_READ_STR", "OP_FACT", 
		"OP_NEXT", "OP_PREV", "OP_ROUND", "OP_NEGATE", "OP_HEAD", "OP_TAIL", "OP_DISTINCT", 
		"OP_FLATTEN", "OP_PURGE", "OP_REV", "OP_SORT", "OP_ADD", "OP_SUB", "OP_DIV", 
		"OP_MUL", "OP_MOD", "OP_POW", "OP_LOG", "OP_INC_RANGE", "OP_RANGE", "OP_SMALL", 
		"OP_BIG", "OP_BIN_AND", "OP_BIN_OR", "OP_BIN_XOR", "OP_BIN_NOT", "OP_LSHIFT", 
		"OP_RSHIFT", "OP_LROTATE", "OP_RROTATE", "OP_INDEX", "OP_INDEX_END", "OP_INDEX_OF", 
		"OP_FILT", "OP_NEG_FILT", "OP_JUMP", "OP_NEG_JUMP", "OP_JUMP_BACK", "OP_NEG_JUMP_BACK", 
		"OP_COND", "OP_NEG_COND", "OP_LIST_DIFF", "OP_INTERSECT", "OUT_INV", "OUT_DEF", 
		"OUT_STR", "OPMOD_POW", "OPMOD_CUT", "OPMOD_FOLD", "WS", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Prime.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PrimeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PrimeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PrimeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PrimeParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(PrimeParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(PrimeParser.NL, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 63672L) != 0)) {
				{
				State = 38;
				line();
				}
			}

			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NL) {
				{
				{
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 41;
					Match(NL);
					}
					}
					State = 44;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NL );
				State = 46;
				line();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutMethodContext outMethod() {
			return GetRuleContext<OutMethodContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			termSeq();
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070450532247928832L) != 0)) {
				{
				State = 55;
				outMethod();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext[] mulTerm() {
			return GetRuleContexts<MulTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm(int i) {
			return GetRuleContext<MulTermContext>(i);
		}
		public TermSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermSeqContext termSeq() {
		TermSeqContext _localctx = new TermSeqContext(Context, State);
		EnterRule(_localctx, 4, RULE_termSeq);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 58;
					mulTerm(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulTermContext : ParserRuleContext {
		public MulTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulTerm; } }
	 
		public MulTermContext() { }
		public virtual void CopyFrom(MulTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListUnaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListUnaryOpContext listUnaryOp() {
			return GetRuleContext<ListUnaryOpContext>(0);
		}
		public ListUnaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachLeftTermContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForEachBlockContext forEachBlock() {
			return GetRuleContext<ForEachBlockContext>(0);
		}
		public ForEachLeftTermContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachLeftTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachRightTermContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		public ForEachRightTermContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachRightTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimeParser.RTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		public BinaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		public AtomContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericUnaryOperationContext : MulTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public MulTermContext mulTerm() {
			return GetRuleContext<MulTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumUnaryOpContext numUnaryOp() {
			return GetRuleContext<NumUnaryOpContext>(0);
		}
		public NumericUnaryOperationContext(MulTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericUnaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulTermContext mulTerm() {
		return mulTerm(0);
	}

	private MulTermContext mulTerm(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MulTermContext _localctx = new MulTermContext(Context, _parentState);
		MulTermContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_mulTerm, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new AtomContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 64;
			atomTerm();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 85;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new NumericUnaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 66;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 67;
						numUnaryOp();
						}
						break;
					case 2:
						{
						_localctx = new ListUnaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 68;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 69;
						listUnaryOp();
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperationContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 70;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 71;
						binaryOp();
						State = 75;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case T__2:
						case T__3:
						case T__4:
						case INT:
						case OP_VAR1:
						case OP_VAR2:
						case OP_VAR3:
						case OP_READ_LIST:
						case OP_READ_STR:
							{
							State = 72;
							atomTerm();
							}
							break;
						case RTL:
							{
							State = 73;
							Match(RTL);
							State = 74;
							termSeq();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						_localctx = new ForEachLeftTermContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 77;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 78;
						forEachBlock();
						}
						break;
					case 5:
						{
						_localctx = new ForEachRightTermContext(new MulTermContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_mulTerm);
						State = 79;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 80;
						binaryOp();
						State = 81;
						Match(T__0);
						State = 82;
						termSeq();
						State = 83;
						Match(T__1);
						}
						break;
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomTermContext : ParserRuleContext {
		public AtomTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomTerm; } }
	 
		public AtomTermContext() { }
		public virtual void CopyFrom(AtomTermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullaryOperationContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullaryOpContext nullaryOp() {
			return GetRuleContext<NullaryOpContext>(0);
		}
		public NullaryOperationContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		public ParensContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PositiveInfinityContext : AtomTermContext {
		public PositiveInfinityContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositiveInfinity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntegerContext : AtomTermContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(PrimeParser.INT, 0); }
		public IntegerContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegativeInfinityContext : AtomTermContext {
		public NegativeInfinityContext(AtomTermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegativeInfinity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomTermContext atomTerm() {
		AtomTermContext _localctx = new AtomTermContext(Context, State);
		EnterRule(_localctx, 8, RULE_atomTerm);
		int _la;
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntegerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				Match(INT);
				}
				break;
			case T__2:
				_localctx = new NegativeInfinityContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				Match(T__2);
				}
				break;
			case T__3:
				_localctx = new PositiveInfinityContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				Match(T__3);
				}
				break;
			case OP_VAR1:
			case OP_VAR2:
			case OP_VAR3:
			case OP_READ_LIST:
			case OP_READ_STR:
				_localctx = new NullaryOperationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 93;
				nullaryOp();
				}
				break;
			case T__4:
				_localctx = new ParensContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 94;
				Match(T__4);
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 63672L) != 0)) {
					{
					State = 95;
					termSeq();
					}
				}

				State = 98;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForEachOperationContext forEachOperation() {
			return GetRuleContext<ForEachOperationContext>(0);
		}
		public ForEachBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachBlockContext forEachBlock() {
		ForEachBlockContext _localctx = new ForEachBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_forEachBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__0);
			State = 102;
			forEachOperation();
			State = 103;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachOperationContext : ParserRuleContext {
		public ForEachOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachOperation; } }
	 
		public ForEachOperationContext() { }
		public virtual void CopyFrom(ForEachOperationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForEachNumericUnaryContext : ForEachOperationContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumUnaryOpContext numUnaryOp() {
			return GetRuleContext<NumUnaryOpContext>(0);
		}
		public ForEachNumericUnaryContext(ForEachOperationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachNumericUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachBinaryContext : ForEachOperationContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryOpContext binaryOp() {
			return GetRuleContext<BinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomTermContext atomTerm() {
			return GetRuleContext<AtomTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTL() { return GetToken(PrimeParser.RTL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermSeqContext termSeq() {
			return GetRuleContext<TermSeqContext>(0);
		}
		public ForEachBinaryContext(ForEachOperationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForEachListUnaryContext : ForEachOperationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListUnaryOpContext listUnaryOp() {
			return GetRuleContext<ListUnaryOpContext>(0);
		}
		public ForEachListUnaryContext(ForEachOperationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachListUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachOperationContext forEachOperation() {
		ForEachOperationContext _localctx = new ForEachOperationContext(Context, State);
		EnterRule(_localctx, 12, RULE_forEachOperation);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
			case OP_ADD:
			case OP_SUB:
			case OP_DIV:
			case OP_MUL:
			case OP_MOD:
			case OP_POW:
			case OP_LOG:
			case OP_INC_RANGE:
			case OP_RANGE:
			case OP_SMALL:
			case OP_BIG:
			case OP_BIN_AND:
			case OP_BIN_OR:
			case OP_BIN_XOR:
			case OP_LSHIFT:
			case OP_RSHIFT:
			case OP_LROTATE:
			case OP_RROTATE:
			case OP_INDEX:
			case OP_INDEX_END:
			case OP_INDEX_OF:
			case OP_JUMP:
			case OP_NEG_JUMP:
			case OP_JUMP_BACK:
			case OP_NEG_JUMP_BACK:
			case OP_COND:
			case OP_NEG_COND:
			case OP_LIST_DIFF:
			case OP_INTERSECT:
				_localctx = new ForEachBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				binaryOp();
				State = 109;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
				case T__3:
				case T__4:
				case INT:
				case OP_VAR1:
				case OP_VAR2:
				case OP_VAR3:
				case OP_READ_LIST:
				case OP_READ_STR:
					{
					State = 106;
					atomTerm();
					}
					break;
				case RTL:
					{
					State = 107;
					Match(RTL);
					State = 108;
					termSeq();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OP_FACT:
			case OP_NEXT:
			case OP_PREV:
			case OP_ROUND:
			case OP_NEGATE:
				_localctx = new ForEachNumericUnaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 111;
				numUnaryOp();
				}
				break;
			case OP_HEAD:
			case OP_TAIL:
			case OP_DISTINCT:
			case OP_FLATTEN:
			case OP_REV:
			case OP_SORT:
				_localctx = new ForEachListUnaryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 112;
				listUnaryOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_VAR1() { return GetToken(PrimeParser.OP_VAR1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_VAR2() { return GetToken(PrimeParser.OP_VAR2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_VAR3() { return GetToken(PrimeParser.OP_VAR3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_READ_LIST() { return GetToken(PrimeParser.OP_READ_LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_READ_STR() { return GetToken(PrimeParser.OP_READ_STR, 0); }
		public BaseNullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNullaryOpContext baseNullaryOp() {
		BaseNullaryOpContext _localctx = new BaseNullaryOpContext(Context, State);
		EnterRule(_localctx, 14, RULE_baseNullaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 63488L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNumUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_FACT() { return GetToken(PrimeParser.OP_FACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEXT() { return GetToken(PrimeParser.OP_NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_PREV() { return GetToken(PrimeParser.OP_PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ROUND() { return GetToken(PrimeParser.OP_ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEGATE() { return GetToken(PrimeParser.OP_NEGATE, 0); }
		public BaseNumUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNumUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNumUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNumUnaryOpContext baseNumUnaryOp() {
		BaseNumUnaryOpContext _localctx = new BaseNumUnaryOpContext(Context, State);
		EnterRule(_localctx, 16, RULE_baseNumUnaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2031616L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseNumBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_ADD() { return GetToken(PrimeParser.OP_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SUB() { return GetToken(PrimeParser.OP_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MUL() { return GetToken(PrimeParser.OP_MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DIV() { return GetToken(PrimeParser.OP_DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MOD() { return GetToken(PrimeParser.OP_MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_POW() { return GetToken(PrimeParser.OP_POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LOG() { return GetToken(PrimeParser.OP_LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SMALL() { return GetToken(PrimeParser.OP_SMALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIG() { return GetToken(PrimeParser.OP_BIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INC_RANGE() { return GetToken(PrimeParser.OP_INC_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RANGE() { return GetToken(PrimeParser.OP_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_AND() { return GetToken(PrimeParser.OP_BIN_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_OR() { return GetToken(PrimeParser.OP_BIN_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_BIN_XOR() { return GetToken(PrimeParser.OP_BIN_XOR, 0); }
		public BaseNumBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseNumBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseNumBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseNumBinaryOpContext baseNumBinaryOp() {
		BaseNumBinaryOpContext _localctx = new BaseNumBinaryOpContext(Context, State);
		EnterRule(_localctx, 18, RULE_baseNumBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4397778075648L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseListUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_HEAD() { return GetToken(PrimeParser.OP_HEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_TAIL() { return GetToken(PrimeParser.OP_TAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_DISTINCT() { return GetToken(PrimeParser.OP_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_REV() { return GetToken(PrimeParser.OP_REV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_FLATTEN() { return GetToken(PrimeParser.OP_FLATTEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_SORT() { return GetToken(PrimeParser.OP_SORT, 0); }
		public BaseListUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseListUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseListUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseListUnaryOpContext baseListUnaryOp() {
		BaseListUnaryOpContext _localctx = new BaseListUnaryOpContext(Context, State);
		EnterRule(_localctx, 20, RULE_baseListUnaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 232783872L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseListBinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COND() { return GetToken(PrimeParser.OP_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEG_COND() { return GetToken(PrimeParser.OP_NEG_COND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INDEX() { return GetToken(PrimeParser.OP_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INDEX_END() { return GetToken(PrimeParser.OP_INDEX_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INDEX_OF() { return GetToken(PrimeParser.OP_INDEX_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_JUMP() { return GetToken(PrimeParser.OP_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_JUMP_BACK() { return GetToken(PrimeParser.OP_JUMP_BACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEG_JUMP() { return GetToken(PrimeParser.OP_NEG_JUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_NEG_JUMP_BACK() { return GetToken(PrimeParser.OP_NEG_JUMP_BACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LSHIFT() { return GetToken(PrimeParser.OP_LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RSHIFT() { return GetToken(PrimeParser.OP_RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LROTATE() { return GetToken(PrimeParser.OP_LROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_RROTATE() { return GetToken(PrimeParser.OP_RROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LIST_DIFF() { return GetToken(PrimeParser.OP_LIST_DIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_INTERSECT() { return GetToken(PrimeParser.OP_INTERSECT, 0); }
		public BaseListBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseListBinaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseListBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseListBinaryOpContext baseListBinaryOp() {
		BaseListBinaryOpContext _localctx = new BaseListBinaryOpContext(Context, State);
		EnterRule(_localctx, 22, RULE_baseListBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1149535008793296896L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimeParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimeParser.OPMOD_POW, 0); }
		public OpModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpModsContext opMods() {
		OpModsContext _localctx = new OpModsContext(Context, State);
		EnterRule(_localctx, 24, RULE_opMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 125;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignModsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_CUT() { return GetToken(PrimeParser.OPMOD_CUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPMOD_POW() { return GetToken(PrimeParser.OPMOD_POW, 0); }
		public AssignModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignMods; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignMods(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignModsContext assignMods() {
		AssignModsContext _localctx = new AssignModsContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPMOD_POW || _la==OPMOD_CUT) {
				{
				State = 128;
				_la = TokenStream.LA(1);
				if ( !(_la==OPMOD_POW || _la==OPMOD_CUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseNullaryOpContext baseNullaryOp() {
			return GetRuleContext<BaseNullaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public NullaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullaryOpContext nullaryOp() {
		NullaryOpContext _localctx = new NullaryOpContext(Context, State);
		EnterRule(_localctx, 28, RULE_nullaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			baseNullaryOp();
			State = 132;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseNumUnaryOpContext baseNumUnaryOp() {
			return GetRuleContext<BaseNumUnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public NumUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumUnaryOpContext numUnaryOp() {
		NumUnaryOpContext _localctx = new NumUnaryOpContext(Context, State);
		EnterRule(_localctx, 30, RULE_numUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			baseNumUnaryOp();
			State = 135;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListUnaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseListUnaryOpContext baseListUnaryOp() {
			return GetRuleContext<BaseListUnaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		public ListUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listUnaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListUnaryOpContext listUnaryOp() {
		ListUnaryOpContext _localctx = new ListUnaryOpContext(Context, State);
		EnterRule(_localctx, 32, RULE_listUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			baseListUnaryOp();
			State = 138;
			opMods();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(PrimeParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignModsContext assignMods() {
			return GetRuleContext<AssignModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseNumBinaryOpContext baseNumBinaryOp() {
			return GetRuleContext<BaseNumBinaryOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpModsContext opMods() {
			return GetRuleContext<OpModsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BaseListBinaryOpContext baseListBinaryOp() {
			return GetRuleContext<BaseListBinaryOpContext>(0);
		}
		public BinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOpContext binaryOp() {
		BinaryOpContext _localctx = new BinaryOpContext(Context, State);
		EnterRule(_localctx, 34, RULE_binaryOp);
		int _la;
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 140;
				Match(ASSIGN);
				State = 141;
				assignMods();
				}
				break;
			case OP_ADD:
			case OP_SUB:
			case OP_DIV:
			case OP_MUL:
			case OP_MOD:
			case OP_POW:
			case OP_LOG:
			case OP_INC_RANGE:
			case OP_RANGE:
			case OP_SMALL:
			case OP_BIG:
			case OP_BIN_AND:
			case OP_BIN_OR:
			case OP_BIN_XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				baseNumBinaryOp();
				State = 143;
				opMods();
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 144;
					Match(ASSIGN);
					State = 145;
					assignMods();
					}
				}

				}
				break;
			case OP_LSHIFT:
			case OP_RSHIFT:
			case OP_LROTATE:
			case OP_RROTATE:
			case OP_INDEX:
			case OP_INDEX_END:
			case OP_INDEX_OF:
			case OP_JUMP:
			case OP_NEG_JUMP:
			case OP_JUMP_BACK:
			case OP_NEG_JUMP_BACK:
			case OP_COND:
			case OP_NEG_COND:
			case OP_LIST_DIFF:
			case OP_INTERSECT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				baseListBinaryOp();
				State = 149;
				opMods();
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 150;
					Match(ASSIGN);
					State = 151;
					assignMods();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_INV() { return GetToken(PrimeParser.OUT_INV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_DEF() { return GetToken(PrimeParser.OUT_DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_STR() { return GetToken(PrimeParser.OUT_STR, 0); }
		public OutMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPrimeVisitor<TResult> typedVisitor = visitor as IPrimeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutMethodContext outMethod() {
		OutMethodContext _localctx = new OutMethodContext(Context, State);
		EnterRule(_localctx, 36, RULE_outMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8070450532247928832L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return mulTerm_sempred((MulTermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool mulTerm_sempred(MulTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,67,159,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,3,0,40,8,0,1,0,4,0,43,8,0,
		11,0,12,0,44,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,1,0,1,1,1,1,3,1,57,8,
		1,1,2,4,2,60,8,2,11,2,12,2,61,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,3,3,76,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,86,8,3,10,3,12,
		3,89,9,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,97,8,4,1,4,3,4,100,8,4,1,5,1,5,1,
		5,1,5,1,6,1,6,1,6,1,6,3,6,110,8,6,1,6,1,6,3,6,114,8,6,1,7,1,7,1,8,1,8,
		1,9,1,9,1,10,1,10,1,11,1,11,1,12,3,12,127,8,12,1,13,3,13,130,8,13,1,14,
		1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
		3,17,147,8,17,1,17,1,17,1,17,1,17,3,17,153,8,17,3,17,155,8,17,1,18,1,18,
		1,18,0,1,6,19,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,0,7,
		1,0,11,15,1,0,16,20,1,0,28,41,2,0,21,24,26,27,2,0,43,49,52,59,1,0,63,64,
		1,0,60,62,164,0,39,1,0,0,0,2,54,1,0,0,0,4,59,1,0,0,0,6,63,1,0,0,0,8,99,
		1,0,0,0,10,101,1,0,0,0,12,113,1,0,0,0,14,115,1,0,0,0,16,117,1,0,0,0,18,
		119,1,0,0,0,20,121,1,0,0,0,22,123,1,0,0,0,24,126,1,0,0,0,26,129,1,0,0,
		0,28,131,1,0,0,0,30,134,1,0,0,0,32,137,1,0,0,0,34,154,1,0,0,0,36,156,1,
		0,0,0,38,40,3,2,1,0,39,38,1,0,0,0,39,40,1,0,0,0,40,49,1,0,0,0,41,43,5,
		67,0,0,42,41,1,0,0,0,43,44,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,46,1,
		0,0,0,46,48,3,2,1,0,47,42,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,
		0,0,0,50,52,1,0,0,0,51,49,1,0,0,0,52,53,5,0,0,1,53,1,1,0,0,0,54,56,3,4,
		2,0,55,57,3,36,18,0,56,55,1,0,0,0,56,57,1,0,0,0,57,3,1,0,0,0,58,60,3,6,
		3,0,59,58,1,0,0,0,60,61,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,5,1,0,0,
		0,63,64,6,3,-1,0,64,65,3,8,4,0,65,87,1,0,0,0,66,67,10,5,0,0,67,86,3,30,
		15,0,68,69,10,4,0,0,69,86,3,32,16,0,70,71,10,3,0,0,71,75,3,34,17,0,72,
		76,3,8,4,0,73,74,5,8,0,0,74,76,3,4,2,0,75,72,1,0,0,0,75,73,1,0,0,0,76,
		86,1,0,0,0,77,78,10,2,0,0,78,86,3,10,5,0,79,80,10,1,0,0,80,81,3,34,17,
		0,81,82,5,1,0,0,82,83,3,4,2,0,83,84,5,2,0,0,84,86,1,0,0,0,85,66,1,0,0,
		0,85,68,1,0,0,0,85,70,1,0,0,0,85,77,1,0,0,0,85,79,1,0,0,0,86,89,1,0,0,
		0,87,85,1,0,0,0,87,88,1,0,0,0,88,7,1,0,0,0,89,87,1,0,0,0,90,100,5,7,0,
		0,91,100,5,3,0,0,92,100,5,4,0,0,93,100,3,28,14,0,94,96,5,5,0,0,95,97,3,
		4,2,0,96,95,1,0,0,0,96,97,1,0,0,0,97,98,1,0,0,0,98,100,5,6,0,0,99,90,1,
		0,0,0,99,91,1,0,0,0,99,92,1,0,0,0,99,93,1,0,0,0,99,94,1,0,0,0,100,9,1,
		0,0,0,101,102,5,1,0,0,102,103,3,12,6,0,103,104,5,2,0,0,104,11,1,0,0,0,
		105,109,3,34,17,0,106,110,3,8,4,0,107,108,5,8,0,0,108,110,3,4,2,0,109,
		106,1,0,0,0,109,107,1,0,0,0,110,114,1,0,0,0,111,114,3,30,15,0,112,114,
		3,32,16,0,113,105,1,0,0,0,113,111,1,0,0,0,113,112,1,0,0,0,114,13,1,0,0,
		0,115,116,7,0,0,0,116,15,1,0,0,0,117,118,7,1,0,0,118,17,1,0,0,0,119,120,
		7,2,0,0,120,19,1,0,0,0,121,122,7,3,0,0,122,21,1,0,0,0,123,124,7,4,0,0,
		124,23,1,0,0,0,125,127,7,5,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,25,
		1,0,0,0,128,130,7,5,0,0,129,128,1,0,0,0,129,130,1,0,0,0,130,27,1,0,0,0,
		131,132,3,14,7,0,132,133,3,24,12,0,133,29,1,0,0,0,134,135,3,16,8,0,135,
		136,3,24,12,0,136,31,1,0,0,0,137,138,3,20,10,0,138,139,3,24,12,0,139,33,
		1,0,0,0,140,141,5,9,0,0,141,155,3,26,13,0,142,143,3,18,9,0,143,146,3,24,
		12,0,144,145,5,9,0,0,145,147,3,26,13,0,146,144,1,0,0,0,146,147,1,0,0,0,
		147,155,1,0,0,0,148,149,3,22,11,0,149,152,3,24,12,0,150,151,5,9,0,0,151,
		153,3,26,13,0,152,150,1,0,0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,140,
		1,0,0,0,154,142,1,0,0,0,154,148,1,0,0,0,155,35,1,0,0,0,156,157,7,6,0,0,
		157,37,1,0,0,0,17,39,44,49,56,61,75,85,87,96,99,109,113,126,129,146,152,
		154
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
